#################################################################################
# 
# SCRIPT TO RUN EWAS AIR POLLUTION IN INMA PLACENTA 450K
# 
################################################################################

#set workong directory
setwd("---")

################################################################################
#Load packages
################################################################################

library(readr)
library(RefFreeEWAS)

## For Categorical Splitting
library(Hmisc)

## For RLM Linear models:
library(data.table)	# to process results
library(MASS) 		# rlm function for robust linear regression
library(sandwich) 	# Huberís estimation of the standard error
library(lmtest) 		# to use coeftest
library(parallel)
library(haven) #To load .dta data
library(qqman) # to print qq plot
library(R.utils) # To zip files


library(limma) #venn diagrams
library(table1) #Descriptive statistics
library(htmltools) #save html
library(EASIER) # annotation and functional enrichment of the placenta

#################################################################################
# load air polution data  and pd (methilation) data
################################################################################
#Air polution data
ap<- read_dta("---")

### Methylation data
load("---")
pd<-pd2
pd2<-NULL

#### Check the dimentions of the data
dim(as.data.frame(pd))               
dim(as.data.frame(annot))            
dim(fnbetas.adj)      

#################################################################################
# Step 0: subselect variables of interest
################################################################################

selection<-c(1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,35,36,34,38,45)
ap_sub<-ap[,selection]

#################################################################################
# Step 1: create a variable cohort.x 
################################################################################

# Generate a variable cohort.x from ap_sub$cohorte using eht following key:
#
# 1 = Asturies , 2 = Guipuzcoa , 3 = Sabadell , 4 = Valencia
#
ap_sub$cohort.fin<-factor(ap_sub$cohorte, labels = c("Asturies","Gipuzkoa","Sabadell","Valencia"))

#Compare the column cohorte and cohort.x to ensure the samples per cohort are correct after the rename
table(ap_sub$cohorte)
#  1   2   3   4 
# 494 638 657 855
table(ap_sub$cohort.fin)
# Asturies Guipuzcoa  Sabadell  Valencia 
# 494       638       657       855

#################################################################################
# Step 2: link pd with air pollution (using cohort.x + idnum) and save it as PHENO
################################################################################

# Create a variable using cohort.x and idnum together to identify the samples in both dataframes
ap_sub$mergingcolumn<-paste(ap_sub$cohort.fin, ap_sub$idnum)

pd$mergingcolumn <- paste( pd$Cohort_name, pd$idnum )

# Merge the datasets pd and ap_sub by the new column selecting only the 
# samples present in both datasets

PHENO<-merge(x = as.data.frame(pd), y = as.data.frame(ap_sub), by="mergingcolumn")

dim(ap_sub) # 2644 23
dim(pd)     #  168 54   The Samples appearing in boht datasets are 231 
dim(PHENO)  #  168 86  

PHENO.OG<-PHENO

# Indicate categorical variables as factor

for (i in c(7,45,29,52,78,80,82,85,86,87,88,90,91)){ 
  PHENO[,i]<-as.factor(PHENO[,i])
}
################################################################################
## Step 3: SUBSETING THE SAMPLES WITH ALL THE INFORMATION ABOUT THE COVARIATES NEEDED IN THE MODELS
################################################################################

### No2 subset
pheno.no2<-PHENO[,c(2,7,72:76,26,45, 87, 29, 88, 89, 91,52)]
dim(pheno.no2)
pheno.no2f<-pheno.no2[complete.cases(pheno.no2[,c(1:3,8:15)]),]
dim(pheno.no2f)#349

### PM10
pheno.pm10<-PHENO[,c(2,7,72:76,26,45, 87, 29, 88, 89, 91,52)]
dim(pheno.pm10)
pheno.pm10f<-pheno.pm10[complete.cases(pheno.pm10[,c(1:2,4,8:15)]),]
dim(pheno.pm10f)#129
### PM2.5
pheno.pm25<-PHENO[,c(2,7,72:76,26,45, 87, 29, 88, 89, 91,52)]
dim(pheno.pm25)
pheno.pm25f<-pheno.pm25[complete.cases(pheno.pm25[,c(1:2,5,8:15)]),]
dim(pheno.pm25f)#350
### ABS
pheno.abs<-PHENO[,c(2,7,72:76,26,45, 87, 29, 88, 89, 91,52)]
dim(pheno.abs)
pheno.absf<-pheno.abs[complete.cases(pheno.abs[,c(1:2,6,8:15)]),]
dim(pheno.absf)#129 
### PB
pheno.pb<-PHENO[,c(2,7,72:76,26,45, 87, 29, 88, 89, 91,52)]
dim(pheno.pb)
pheno.pbf<-pheno.pb[complete.cases(pheno.pb[,c(1:2,7:15)]),]
dim(pheno.pbf)#70

### NOTE check if IDs in models are in in PM25 (max N) 
table(pheno.absf$Basename%in%pheno.pm25f$Basename)#TRUE
table(pheno.pm10f$Basename%in%pheno.pm25f$Basename)#TRUE
table(pheno.no2f$Basename%in%pheno.pm25f$Basename)#TRUE
table(pheno.pbf$Basename%in%pheno.pm25f$Basename)#TRUE
#

dim(PHENO.OG)     #  389 86
dim(pheno.pm25f)    # 350  86

PHENO<-PHENO[rownames(pheno.pm25f),]
#################################################################################
#Step 4 : Descriptive analysis of the data
################################################################################

PHENO$magecat<-NULL
magecat<-NULL
for ( i in as.vector(PHENO$mage)){
  if (is.na(i)){
    magecat<-c(magecat,"NA")
  } else if (i < 25){
    magecat<-c(magecat,0)
  } else if ( i>=25 & i<=30){
    magecat<-c(magecat,1)
  }else{
    magecat<-c(magecat,2)
  }
} 
PHENO$magecat<-magecat
PHENO$Socioeconomic_ISVUR<- PHENO[,89]
tt<-table1(~ e3_no2_ratio_preg + e3_pm10_ratio_preg + e3_pm25_ratio_preg + e3_abs_ratio_preg + pb_exposure + mage + sexo + parity + smok +  conseason + estudios3c.x + Socioeconomic_ISVUR + bs_ga_i + bweight + ga + preterm.y + cesarean + magecat + CSM2 + imcm + imcm4c + ethnic_origin_2c | cohort.fin, data=PHENO, overall="Total",  render.continuous=c(.="Mean (SD)", .="Median [Min, Max]", "IQR (Q1 -Q3)"="IQR (Q1 - Q3)"))
save_html(tt, "EpicDescriptives31-08.html", background = "white", libdir = "lib", lang = "en")

#################################################################################
#####  Descriptive analysis by cohort

#Pollutants missing information

polnavec<-as.data.frame(matrix(ncol=0,nrow = 350))
for( i in c(72:76)){
  PHENO[,i][as.vector(PHENO[,i]) == ""] = NA
  polnavec$new<-as.numeric(!is.na(PHENO[,i]))
  names(polnavec)[names(polnavec)=="new"] <- colnames(PHENO[i])
}

#### Venn diagram per expositions

for (cohort in unique(PHENO$cohort.x)){
  a <- vennCounts(!apply(PHENO[PHENO$cohort.x==cohort,69:73]),2,is.na)
  vennDiagram(a);title(cohort)
}
maxlen<-length(colnames(polnavec))
Venndata<-NULL

for (i in c(1,2,3,4,5)){
  if(i<5){
    rg<-(i+1):5
    for (j in rg){
      print(paste(colnames(polnavec)[i],"_",colnames(polnavec)[j]))
      N<-length(which(polnavec[,i]==1 & polnavec[,j]==1))
      print(N)
      Venndata<-c(Venndata, c(colnames(polnavec),N))
  }
  }
}
png("Venndiagram_Exposition_EPIC.png")
vennDiagram(vennCounts(polnavec),circle.col=c("red","green","blue","yellow","purple"))
dev.off()    

#################################################################################
# Step 5:  read omegas
################################################################################

omegas<-read.delim("---", header = TRUE, sep = "\t")
omegas.OG<-omegas
fnbetas.adj.OG<-fnbetas.adj

#################################################################################
# Step 6: order IDs in PHENO, omegas and methylation data
################################################################################

PHENO<-pheno.no2f

### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION OR DUPLICATES

PHENO<-PHENO[-which(duplicated(PHENO[,c(2:3,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#########omegas

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE

#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE

#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True


# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #        
dim(fnbetas.adj) #  
dim(PHENO)       #      

# The Size of N match between the datasets and is in the same order. 


#################################################################################
# Step 7: do trimming of methylation data  #Modifyed from the script nº 4
################################################################################

#### Trimming methylation beta values to remove potential outliers

# Trimming scheme is as follows – trim values beyond the lower and upper outer #fences. These are defined by:
# Values < 25th percentile minus 3*IQRANDValues > 75th percentile plus 3*IQR
# (IQR = interquartile range)
# The following code was provided by Gemma Sharp on June 12, 2105 – #modification (to run faster) of code provided earlier by Janine Felix.  Input #also from Allan Just. 

#Function

removeOutliers<-function(probes){
  require(matrixStats)
  if(nrow(probes) <ncol(probes)) warning("expecting probes are rows (long dataset)")
  rowIQR<- rowIQRs(probes, na.rm = T)
  row2575 <- rowQuantiles(probes, probs = c(0.25, 0.75), na.rm = T)
  maskL<- probes < row2575[,1] - 3 * rowIQR 
  maskU<- probes > row2575[,2] + 3 * rowIQR 
  initial_NAs<-rowSums(is.na(probes))
  probes[maskL] <- NA
  removed_lower<- rowSums(is.na(probes))-initial_NAs
  probes[maskU] <- NA
  removed_upper<- rowSums(is.na(probes))-removed_lower-initial_NAs
  N_for_probe<-rowSums(!is.na(probes))
  Log<-data.frame(initial_NAs,removed_lower,removed_upper,N_for_probe)
  return(list(probes, Log))
}

#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix = t(fnbetas.adj2)

# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas)==PHENO$Basename,"MATCHED","Not Matched"))
#MATCHED 1346
table(ifelse(rownames(omegas)==rownames(beta_matrix),"MATCHED","Not Matched"))
#MATCHED 346


#################################################################################
# Step 8: EWAS 
### modifyed fromStandard code from PACE
################################################################################

################################################################################
#################### A MODELS 1 and 2 (NO2) ####################################
################################################################################

################################################################################
########################## Model A1 ############################################
################################################################################

#### Modeling with covariate adjustment

#Add function for running the model 

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, X9) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+X9,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}

#Run adjusted MWAS

# Variables in the model A1
#Methylation = pregnancy NO2 levels + maternal age + child sex + parity + 
#maternal education + maternal smoking during pregnancy + neighborhood SES + 
#season of conception + ancestry (+ cohort)

system.time(ind.resA1 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                 exposure=PHENO[,3] # EXPOSURE (No2 during all pregnancy)  
                                 , X1=PHENO[,8]	# Maternal age 
                                 , X2=PHENO[,9]	# Child sex
                                 , X3=PHENO[,10]	# Parity 
                                 , X4=PHENO[,11]	# Maternal education
                                 , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                 , X6=PHENO[,13]	# Neighborhood SES
                                 , X7=PHENO[,14]	# Season of conception
                                 #, X8=PHENO[,15]	# Ethnicity  
                                 , X9=PHENO[,2]	  #  Cohort
))
Sys.time()

#Process covariate adjusted results
all.resultsA1 <- data.frame(matrix(unlist(ind.resA1), nrow=length(ind.resA1), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsA1$probeID <- names(ind.resA1)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsA1) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsA1, c("probeID","BETA","SE", "P_VAL"))
#rm(probelistnamesA1, ind.resA1)

#Lambda calculation
lambdaA1 = qchisq(median(all.resultsA1$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NA1 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelA1_QQ_Plot_30-08f.pdf")
qq(all.resultsA1$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsA1, "PACE_EPIC_ModelA1_30-08f.txt",na="NA")
gzip("PACE_EPIC_ModelA1_30-08f.txt")

################################################################################
########################## Model A2 ############################################
################################################################################

#### Modeling with covariate adjustment

#Add function for running the model 

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, X9, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+X9+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}
#Run adjusted MWAS

# Variables in the model 
# Methylation = pregnancy NO2 levels + maternal age + child sex + parity + 
# maternal education + maternal smoking during pregnancy + neighborhood SES + 
# season of conception + ancestry + Houseman free reference estimations (+ selection) 

system.time(ind.resA2 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,3] # EXPOSURE (No2 during all pregnancy)  
                                  , X1=PHENO[,8]	# Maternal age 
                                  , X2=PHENO[,9]	# Child sex
                                  , X3=PHENO[,10]	# Parity 
                                  , X4=PHENO[,11]	# Maternal education
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# Neighborhood SES
                                  , X7=PHENO[,14]	# Season of conception
                                  #, X8=PHENO[,15]	# ancestry  
                                  , X9=PHENO[,2]	#  Cohort
                                  , cell1 = omegas[,1]
                                  , cell2 = omegas[,2]
                                  , cell3 = omegas[,3]
                                  , cell4 = omegas[,4]
                                  , cell5 = omegas[,5]
                                  , cell6 = omegas[,6]
                                  , cell7 = omegas[,7]
))
Sys.time()

#Process covariate adjusted results
all.resultsA2 <- data.frame(matrix(unlist(ind.resA2), nrow=length(ind.resA2), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsA2$probeID <- names(ind.resA2)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsA2) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsA2, c("probeID","BETA","SE", "P_VAL"))

rm(probelistnamesA2, ind.resA2)

#Lambda calculation
lambdaA2 = qchisq(median(all.resultsA2$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NA2 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelA2_QQ_Plot_31-08.pdf")
qq(all.resultsA2$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsA2, "PACE_EPIC_ModelA2_31-08.txt",na="NA")
gzip("PACE_EPIC_ModelA2_31-08.txt")

################################################################################
#################### B MODELS 1 and 2 (PM2.5) ##################################
################################################################################

############ Order IDs in PHENO, omegas and methylation data   #################

PHENO<-pheno.pm25f

### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION 

PHENO<-PHENO[-which(duplicated(PHENO[,c(2,5,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE

#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE

#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True

# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #      154   3      -> Samples in Rows    
dim(fnbetas.adj) #   478434   154    -> Samples in Columns 
dim(PHENO)       #      154   86     -> Samples in Rows    

# The Size of N match between the datasets and is in the same order. 

###################### Trimming of methylation data #########################

#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix = t(fnbetas.adj2)

# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas)==PHENO$Basename,"MATCHED","Not Matched"))
#MATCHED 168
table(ifelse(rownames(omegas)==rownames(beta_matrix),"MATCHED","Not Matched"))
#MATCHED 168 

#################################### Summarize probes ############################

#function
descriptives<-function(x){
  tmp<-c(min(x,na.rm=T),quantile(x,probs=c(.1,.25,.5),na.rm=T),mean(x,na.rm=T), median(x,na.rm=T),sd(x,na.rm=T),quantile(x,probs=c(.75,.90),na.rm=T),max(x,na.rm=T),sum(is.na(x)))
  names(tmp)[c(1,5:7,10:11)]<-c("Min.","Mean","Median","SD","Max.","NA")
  return(tmp)
}

desc<-t(apply(beta_matrix,2,descriptives))
write.table(desc, "PACE_INMA_CpG_summary_31-08.txt", sep = "\t", col.names = T, row.names = T, append = F, quote=FALSE)

################################################################################
########################## Model B1 ############################################
################################################################################
#Methylation = pregnancy PM2.5 levels + child sex + parity + maternal education +
# maternal smoking during pregnancy + neighborhood SES + season of conception + ancestry (+ cohort)

#Add function for running the model 

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, X9) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+X9,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}

#Run adjusted MWAS

# Variables in the model
system.time(ind.resB1 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                 exposure=PHENO[,5] # EXPOSURE   P2.5
                                 , X1=PHENO[,8]	# Maternal age 
                                 , X2=PHENO[,9]	# Child sex
                                 , X3=PHENO[,10]	# Parity 
                                 , X4=PHENO[,11]	# Maternal education
                                 , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                 , X6=PHENO[,13]	# Neighborhood SES
                                 , X7=PHENO[,14]	# Season of conception
                                 #, X8=PHENO[,15]	# ancestry  
                                 , X9=PHENO[,2]	#  Cohort
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsB1 <- data.frame(matrix(unlist(ind.resB1), nrow=length(ind.resB1), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsB1$probeID <- names(ind.resB1)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsB1) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsB1, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesB1, ind.resB1)

#Lambda calculation
lambdaB1 = qchisq(median(all.resultsB1$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NB1 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelB1_QQ_Plot_13-08.pdf")
qq(all.resultsB1$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsB1, "PACE_EPIC_ModelB1_31-08.txt",na="NA")
gzip("PACE_EPIC_ModelB1_31-08.txt")

################################################################################
########################## Model B2 ############################################
################################################################################

#Methylation = pregnancy PM2.5 levels + child sex + parity + maternal education +
# maternal smoking during pregnancy + neighborhood SES + season of conception + ancestry (+ cohort)

#### Modeling with covariate and cell-mix adjustment

#Add function for running the model 

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, X9, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+X9+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}

#Run adjusted MWAS

system.time(ind.resB2 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,5] # EXPOSURE   
                                  , X1=PHENO[,8]	# child sex
                                  , X2=PHENO[,9]	# child sex
                                  , X3=PHENO[,10]	# Parity 
                                  , X4=PHENO[,11]	# Maternal education 
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# neighbourhood SES 
                                  , X7=PHENO[,14]	# Season of conception
                                  #, X8=PHENO[,15]	# ancestry  
                                  , X9=PHENO[,2]	#  Cohort  
                                  , cell1 = omegas[,1]
                                  , cell2 = omegas[,2]
                                  , cell3 = omegas[,3]
                                  , cell4 = omegas[,4]
                                  , cell5 = omegas[,5]
                                  , cell6 = omegas[,6]
                                  , cell7 = omegas[,7]
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsB2 <- data.frame(matrix(unlist(ind.resB2), nrow=length(ind.resB2), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsB2$probeID <- names(ind.resB2)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsB2) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsB2, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesB2, ind.resB2)

#Lambda calculation
lambdaB2 = qchisq(median(all.resultsB2$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NB2 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelB2_QQ_Plot_31-08.pdf")
qq(all.resultsB2$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsB2, "PACE_EPIC_ModelB2_31-08.txt",na="NA")
gzip("PACE_EPIC_ModelB2_31-08.txt")


################################################################################
#################### C MODELS 1 and 2 (PM 2.5 Abs) #############################
################################################################################

############ Order IDs in PHENO, omegas and methylation data   #################

PHENO<-pheno.absf

### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION 

PHENO<-PHENO[-which(duplicated(PHENO[,c(2,6,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#########omegas

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE

#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE

#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True

# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #      154   3      -> Samples in Rows    
dim(fnbetas.adj) #   478434   154    -> Samples in Columns 
dim(PHENO)       #      154   86     -> Samples in Rows    

# The Size of N match between the datasets and is in the same order. 

###################### Trimming of methylation data #########################

#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix = t(fnbetas.adj2)

# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas)==PHENO$Basename,"MATCHED","Not Matched"))
#MATCHED 168
table(ifelse(rownames(omegas)==rownames(beta_matrix),"MATCHED","Not Matched"))
#MATCHED 168 

################################################################################
########################## Model C1 ############################################
################################################################################

#Methylation = pregnancy PM2.5 absorbance levels + child sex + parity + 
# maternal education + maternal smoking during pregnancy + neighborhood SES + 
# season of conception + ancestry (+ selection)

#### Modeling with covariate and cell-mix adjustment

#Add function for running the model 
RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7 ,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}


#Run adjusted MWAS

system.time(ind.resC1 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,6] # EXPOSURE   PM2.5 abs levels
                                  , X1=PHENO[,8]	# Maternal age 
                                  , X2=PHENO[,9]	# Child sex
                                  , X3=PHENO[,10]	# Parity 
                                  , X4=PHENO[,11]	# Maternal education
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# Neighborhood SES
                                  , X7=PHENO[,14]	# Season of conception
                                  #, X8=PHENO[,15]	# ancestry  
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsC1 <- data.frame(matrix(unlist(ind.resC1), nrow=length(ind.resC1), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsC1$probeID <- names(ind.resC1)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsC1) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsC1, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesC1, ind.resC1)

#Lambda calculation
lambdaC1 = qchisq(median(all.resultsC1$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NC1 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelC1_QQ_Plot_31-08_NA.pdf")
qq(all.resultsC1$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsC1, "PACE_EPIC_ModelC1_31-08_NA.txt",na="NA")
gzip("PACE_EPIC_ModelC1_31-08_NA.txt")

################################################################################
########################## Model C2 ############################################
################################################################################

#Methylation = pregnancy PM2.5 absorbance levels + child sex + parity + 
# maternal education + maternal smoking during pregnancy + neighborhood SES + 
# season of conception + ancestry (+ selection)

#### Modeling with covariate and cell-mix adjustment

#Add function for running the model 

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}

#Run adjusted MWAS

system.time(ind.resC2 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,6] # EXPOSURE   PM2.5 abs levels
                                  , X1=PHENO[,8]	# maternal age
                                  , X2=PHENO[,9]	# child sex
                                  , X3=PHENO[,10]	# Parity 
                                  , X4=PHENO[,11]	# Maternal education 
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# neighbourhood SES 
                                  , X7=PHENO[,14]	# Season of conception
                                  #, X8=PHENO[,15]	# ancestry  
                                  , cell1 = omegas[,1]
                                  , cell2 = omegas[,2]
                                  , cell3 = omegas[,3]
                                  , cell4 = omegas[,4]
                                  , cell5 = omegas[,5]
                                  , cell6 = omegas[,6]
                                  , cell7 = omegas[,7]
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsC2 <- data.frame(matrix(unlist(ind.resC2), nrow=length(ind.resC2), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsC2$probeID <- names(ind.resC2)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsC2) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsC2, c("probeID","BETA","SE", "P_VAL"))

rm(probelistnamesC2, ind.resC2)

#Lambda calculation
lambdaC2 = qchisq(median(all.resultsC2$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NC2 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelC2_QQ_Plot_15-08f.pdf")
qq(all.resultsC2$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsC2, "PACE_EPIC_ModelC2_15-08f.txt",na="NA")
gzip("PACE_EPIC_ModelC2_15-08f.txt")

################################################################################
#################### D MODELS 1 and 2 (PM 10) ##################################
################################################################################

############ Order IDs in PHENO, omegas and methylation data   #################

PHENO<-pheno.pm10f

### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION 

PHENO<-PHENO[-which(duplicated(PHENO[,c(2,4,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#########omegas

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE

#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE


#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True


# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #      154   3      -> Samples in Rows    
dim(fnbetas.adj) #   478434   154    -> Samples in Columns 
dim(PHENO)       #      154   86     -> Samples in Rows    

# The Size of N match between the datasets and is in the same order. 

###################### Trimming of methylation data #########################

#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix = t(fnbetas.adj2)

# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas)==PHENO$Basename,"MATCHED","Not Matched"))
#MATCHED 168
table(ifelse(rownames(omegas)==rownames(beta_matrix),"MATCHED","Not Matched"))
#MATCHED 168 

################################################################################
########################## Model D1 ############################################
################################################################################

#Methylation = pregnancy PM10 levels + child sex + parity + 
# maternal education + maternal smoking during pregnancy + neighborhood SES + 
# season of conception + ancestry (+ selection)

#### Modeling with covariate and cell-mix adjustment

#Add function for running the model 

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3,X4,X5,X6,X7) {
  mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7,maxit=200))
  if(class(mod) == "try-error"){
    print(paste("error thrown by column", methcol))
    invisible(rep(NA, 3))
  }else 
    cf = coeftest(mod, vcov=vcovHC(mod, type="HC0"))
  cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}
RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}
#Run adjusted MWAS

system.time(ind.resD1 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,4] # EXPOSURE   PM10
                                  , X1=PHENO[,8]	# Maternal age 
                                  , X2=PHENO[,9]	# Child sex
                                  , X3=PHENO[,10]	# Parity 
                                  , X4=PHENO[,11]	# Maternal education
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# Neighborhood SES
                                  , X7=PHENO[,14]	# Season of conception
                                  #, X8=PHENO[,15]	# ancestry  
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsD1 <- data.frame(matrix(unlist(ind.resD1), nrow=length(ind.resD1), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsD1$probeID <- names(ind.resD1)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsD1) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsD1, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesD1, ind.resD1)

#Lambda calculation
lambdaD1 = qchisq(median(all.resultsD1$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
ND1 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_INMA_ModelD1_QQ_Plot_31-08.pdf")
qq(all.resultsD1$P_VAL,main="PACE_INMA_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsD1, "PACE_INMA_ModelD1_31-08.txt",na="NA")
gzip("PACE_INMA_ModelD1_31-08.txt")

################################################################################
########################## Model D2 ############################################
################################################################################

#Methylation = pregnancy PM10 levels + child sex + parity + 
# maternal education + maternal smoking during pregnancy + neighborhood SES + 
# season of conception + ancestry (+ selection)

#### Modeling with covariate and cell-mix adjustment

#Add function for running the model 

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}
#Run adjusted MWAS

# Variables in the model  
system.time(ind.resD2 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,4] # EXPOSURE   pm10
                                  , X1=PHENO[,8]	# maternal age
                                  , X2=PHENO[,9]	# child sex
                                  , X3=PHENO[,10]	# Parity 
                                  , X4=PHENO[,11]	# Maternal education 
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# neighbourhood SES 
                                  , X7=PHENO[,14]	# Season of conception
                                  #, X8=PHENO[,15]	# ancestry  
                                  , cell1 = omegas[,1]
                                  , cell2 = omegas[,2]
                                  , cell3 = omegas[,3]
                                  , cell4 = omegas[,4]
                                  , cell5 = omegas[,5]
                                  , cell6 = omegas[,6]
                                  , cell7 = omegas[,7]
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsD2 <- data.frame(matrix(unlist(ind.resD2), nrow=length(ind.resD2), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsD2$probeID <- names(ind.resD2)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsD2) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsD2, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesD2, ind.resD2)

#Lambda calculation
lambdaD2 = qchisq(median(all.resultsD2$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
ND2 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelD2_QQ_Plot_31-08.pdf")
qq(all.resultsD2$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsD2, "PACE_EPIC_ModelD2_31-08.txt",na="NA")
gzip("PACE_EPIC_ModelD2_31-08.txt")

################################################################################
############### A and B MODELS 3 (NO2 and PM2.5 of non smoke) ##################
################################################################################

#  Sensitivity analysis (models restricted to mothers that did not smoke during pregnancy) 
#  additionally adjusted model for cellular heterogeneity

############ Order IDs in PHENO, omegas and methylation data   #################

PHENO<-pheno.no2f
PHENO<-PHENO[PHENO[,12]==0,]
### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION 

PHENO<-PHENO[-which(duplicated(PHENO[,c(2,3,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE

#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE

#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True

# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #      154   3      -> Samples in Rows    
dim(fnbetas.adj) #   478434   154    -> Samples in Columns 
dim(PHENO)       #      154   86     -> Samples in Rows    

###################### Trimming of methylation data #########################

#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix_NSP = t(fnbetas.adj2)
omegas_NSP<-omegas
PHENO_NSP<-PHENO[match(rownames(omegas_NSP),as.vector(PHENO$Basename)), ]

# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas_NSP)==PHENO_NSP$Basename,"MATCHED","Not Matched"))
#MATCHED 168
table(ifelse(rownames(omegas_NSP)==rownames(beta_matrix_NSP),"MATCHED","Not Matched"))
#MATCHED 168 

################################################################################
########################## Model A3 ############################################
################################################################################

##Methylation = pregnancy NO2  levels + maternal age + child sex + parity + 
# maternal education + neighborhood SES + season of conception + ancestry + 
# Houseman free reference estimations (+ selection) 


#### Modeling with covariate adjustment

#Add function for running the model (4 covariates)

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X8, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X8+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}
#Run adjusted MWAS
# Variables in the model 

system.time(ind.resA3 <- mclapply(setNames(seq_len(ncol(beta_matrix_NSP)), dimnames(beta_matrix_NSP)[[2]]), RLMtest, meth_matrix=beta_matrix_NSP, 
                                 exposure=PHENO_NSP[,3] #EXPOSURE (NO2)--  69 <-"PHENO_NSP$e3_no2_ratio_preg"
                                 , X1=PHENO_NSP[,8]	# Maternal age -- 18 <-"mage.x"
                                 , X2=PHENO_NSP[,9]	# Child sex
                                 , X3=PHENO_NSP[,10]	# Parity -- 88 <-"parity" 
                                 , X4=PHENO_NSP[,11]	# Maternal education  -- 78 <-"estudios3c"
                                 , X5=PHENO_NSP[,13]	# neighbourhood SES
                                 , X6=PHENO_NSP[,14]	# Season of conception
                                 #, X7=PHENO_NSP[,15]	# ancestry
                                 , X8=PHENO_NSP[,2]	  # cohort
                                 , cell1 = omegas_NSP[,1]# Houseman free r.e. -- Omegas[,1]
                                 , cell2 = omegas_NSP[,2]# Houseman free r.e. -- Omegas[,2]
                                 , cell3 = omegas_NSP[,3]# Houseman free r.e. -- Omegas[,3]
                                 , cell4 = omegas_NSP[,4]
                                 , cell5 = omegas_NSP[,5]
                                 , cell6 = omegas_NSP[,6]
                                 , cell7 = omegas_NSP[,7]
                                 
))
Sys.time()

#Process covariate adjusted results
all.resultsA3 <- data.frame(matrix(unlist(ind.resA3), nrow=length(ind.resA3), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsA3$probeID <- names(ind.resA3)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsA3) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsA3, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesA3, ind.resA3)

#Lambda calculation
lambdaA3 = qchisq(median(all.resultsA3$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NA3 = nrow(beta_matrix_NSP) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelA3_QQ_Plot_15-08f.pdf")
qq(all.resultsA3$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsA3, "PACE_EPIC_ModelA3_15-08f.txt",na="NA")
gzip("PACE_EPIC_ModelA3_15-08f.txt")

################################################################################

############ Order IDs in PHENO, omegas and methylation data   #################

PHENO<-pheno.pm25f
PHENO<-PHENO[PHENO[,12]==0,]
### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION 

PHENO<-PHENO[-which(duplicated(PHENO[,c(2,5,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#########omegas

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE

#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 

#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE


#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True


# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #      154   3      -> Samples in Rows    
dim(fnbetas.adj) #   478434   154    -> Samples in Columns 
dim(PHENO)       #      154   86     -> Samples in Rows    

###################### Trimming of methylation data #########################

#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix = t(fnbetas.adj2)

PHENO<-PHENO[match(rownames(omegas),as.vector(PHENO$Basename)), ]
# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas)==PHENO$Basename,"MATCHED","Not Matched"))
#MATCHED 168
table(ifelse(rownames(omegas)==rownames(beta_matrix),"MATCHED","Not Matched"))
 

################################################################################
########################## Model B3 ############################################
################################################################################

#Methylation = pregnancy PM2.5 levels + maternal age + child sex + parity + 
# maternal education + neighborhood SES + season of conception + ancestry + 
#Houseman free reference estimations (+ selection) 

#### Modeling with covariate adjustment

#Add function for running the model (4 covariates)
RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X8, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X8+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}

#Run adjusted MWAS
# Variables in the model  72,84,80,87,29,88,89,91,52) 41
system.time(ind.resB3 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                 exposure=PHENO[,5] #EXPOSURE (PM2.5)
                                 , X1=PHENO[,8]	# Maternal age -- 18 <-"mage.x"
                                 , X2=PHENO[,9]	# Child sex
                                 , X3=PHENO[,10]	# Parity -- 88 <-"parity" 
                                 , X4=PHENO[,11]	# Maternal education  -- 78 <-"estudios3c"
                                 , X5=PHENO[,13]	# neighbourhood SES
                                 , X6=PHENO[,14]	# Season of conception
                                 #, X7=PHENO[,15]	# ancestry
                                 , X8=PHENO[,2]	  # cohort
                                 , cell1 = omegas[,1]
                                 , cell2 = omegas[,2]
                                 , cell3 = omegas[,3]
                                 , cell4 = omegas[,4]
                                 , cell5 = omegas[,5]
                                 , cell6 = omegas[,6]
                                 , cell7 = omegas[,7]
                                 
                                 
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsB3 <- data.frame(matrix(unlist(ind.resB3), nrow=length(ind.resB3), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsB3$probeID <- names(ind.resB3)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsB3) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsB3, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesB3, ind.resB3)

#Lambda calculation
lambdaB3 = qchisq(median(all.resultsB3$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NB3 = nrow(beta_matrix) 

#Q-Q plots
pdf("PACE_EPIC_ModelB3_QQ_Plot_15-08f.pdf")
qq(all.resultsB3$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsB3, "PACE_EPIC_ModelB3_15-08f.txt",na="NA")
gzip("PACE_EPIC_ModelB3_15-08f.txt")


################################################################################
############### A and B MODELS 4 (NO2 and PM2.5 of Europeans) ##################
################################################################################

#	Sensitivity analysis (models restricted to European ancestry) 
# additionally adjusted model for cellular heterogeneity

############ Order IDs in PHENO, omegas and methylation data   #################

PHENO<-pheno.no2f

PHENO<-PHENO[PHENO[,15]=="European",] ###### REVISAR
### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION 

PHENO<-PHENO[-which(duplicated(PHENO[,c(2,3,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#########omegas
#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE
#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 
#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE

#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True

# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #      154   3      -> Samples in Rows    
dim(fnbetas.adj) #   478434   154    -> Samples in Columns 
dim(PHENO)       #      154   86     -> Samples in Rows    


#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix = t(fnbetas.adj2)


# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas)==PHENO$Basename,"MATCHED","Not Matched"))
#MATCHED 168
table(ifelse(rownames(omegas)==rownames(beta_matrix),"MATCHED","Not Matched"))
#MATCHED 168 
################################################################################
########################## Model A4 ############################################
################################################################################
##Methylation = pregnancy NO2  levels + maternal age + child sex + parity + 
# maternal education + neighborhood SES + season of conception + ancestry + 
# Houseman free reference estimations (+ selection) 

#### Modeling with covariate adjustment

#Add function for running the model (4 covariates)
RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, X8, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+X8+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}

#Run adjusted MWAS
# Variables in the model  
system.time(ind.resA4 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,3] #EXPOSURE (NO2)--  69 <-"PHENO_EUR$e3_no2_ratio_preg"
                                  , X1=PHENO[,8]	# Maternal age -- 18 <-"mage.x"
                                  , X2=PHENO[,9]	# Child sex
                                  , X3=PHENO[,10]	# Parity -- 88 <-"parity" 
                                  , X4=PHENO[,11]	# Maternal education  -- 78 <-"estudios3c"
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# neighbourhood SES
                                  , X7=PHENO[,14]	# Season of conception
                                  , X8=PHENO[,2]	# (cohort)
                                  , cell1 = omegas[,1]# Houseman free r.e. -- Omegas[,1]
                                  , cell2 = omegas[,2]# Houseman free r.e. -- Omegas[,2]
                                  , cell3 = omegas[,3]# Houseman free r.e. -- Omegas[,3]
                                  , cell4 = omegas[,4]
                                  , cell5 = omegas[,5]
                                  , cell6 = omegas[,6]
                                  , cell7 = omegas[,7]
))
Sys.time()

#Process covariate adjusted results
all.resultsA4 <- data.frame(matrix(unlist(ind.resA4), nrow=length(ind.resA4), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsA4$probeID <- names(ind.resA4)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsA4) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsA4, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesA4, ind.resA4)

#Lambda calculation
lambdaA4 = qchisq(median(all.resultsA4$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NA4 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelA4_QQ_Plot_31-08.pdf")
qq(all.resultsA4$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsA4, "PACE_EPIC_ModelA4_31-08.txt",na="NA")
gzip("PACE_EPIC_ModelA4_31-08.txt")

#################################################################################

############ Order IDs in PHENO, omegas and methylation data   #################

PHENO<-pheno.pm25f

PHENO<-PHENO[PHENO[,15]=="European",]

### REMOVE THE INDIVIDUALS WITH MISSING INFORMATION 
PHENO<-PHENO[-which(duplicated(PHENO[,c(2,5,8:15)], fromLast = TRUE)),]
fnbetas.adj<-fnbetas.adj.OG[,(colnames(fnbetas.adj.OG)  %in% PHENO$Basename)]
omegas<-omegas.OG[(rownames(omegas.OG)  %in% PHENO$Basename),]

#########omegas
#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##FALSE
#To Correct the order of the phenotipic data identical(colnames(fnbetas.adj), gsub("/home/isglobal.lan/mbustamante/data/WS_INMA/Methylation_INMA/PACE/Placentomics/raw_data/idat_files/","",PHENO$Basename)) ##FALSE
PHENO <- PHENO[match(colnames(fnbetas.adj),as.vector(PHENO$Basename)), ] 
#Check the order to be the same between Methilation data and pheno data
identical(colnames(fnbetas.adj), as.character(PHENO$Basename)) ##TRUE

#Check the order to be the same in the id's of Methilation data and omegas 
identical(colnames(fnbetas.adj), rownames(omegas)) ###True

# Check the dimention of the N to be consistent between the datasets
dim(omegas)      #      154   3      -> Samples in Rows    
dim(fnbetas.adj) #   478434   154    -> Samples in Columns 
dim(PHENO)       #      154   86     -> Samples in Rows    

###################### Trimming of methylation data #########################

#Remove outliers from METH (methylation data where probes are rows and samples are columns)

system.time(OutlierResults<-removeOutliers(fnbetas.adj)) 
fnbetas.adj2<-OutlierResults[[1]]
dim(fnbetas.adj2)
Log<-OutlierResults[[2]]
#save(Log,file="PACE_INMA_Outlier_log.Rdata") #save log

#transpose betas so that rows are samples and columns are probes
beta_matrix = t(fnbetas.adj2)

# omegas
# Ensure CellMix matrix matches methylation beta-value matrix and other phenotype data
table(ifelse(rownames(omegas)==PHENO$Basename,"MATCHED","Not Matched"))
#MATCHED 168
table(ifelse(rownames(omegas)==rownames(beta_matrix),"MATCHED","Not Matched"))
#MATCHED 168 


################################################################################
########################## Model B4 ############################################
################################################################################

#Methylation = pregnancy PM2.5 levels + maternal age + child sex + parity + 
# maternal education + neighborhood SES + season of conception + ancestry + 
#Houseman free reference estimations (+ selection) 

#### Modeling with covariate adjustment

#Add function for running the model (4 covariates)

RLMtest = function(meth_matrix,methcol,exposure, X1, X2, X3, X4, X5, X6, X7, X8, cell1, cell2, cell3, cell4, cell5, cell6, cell7) {
    mod = try(rlm(meth_matrix[, methcol]~exposure+X1+X2+X3+X4+X5+X6+X7+X8+cell1+cell2+cell3+cell4+cell5+cell6+cell7,maxit=200))
    if(class(mod) == "try-error"){
        print(paste("error thrown by column", methcol))
        invisible(rep(NA, 3))
    }else {
        cf = try(coeftest(mod, vcov=vcovHC(mod, type="HC0")))
        if( class(cf)[1] == "try-error") {
            cat("error throw by CpG", set, ";")
            print(paste0(cov, " - chol2inv could not be computed"))
            cf = rep(NA,3)
        }
       
    }
    cf[2, c("Estimate", "Std. Error", "Pr(>|z|)")]
}

#Run adjusted MWAS
# Variables in the model colnames(PHENO)[c(72,84,80,87,29,88,89,91,52)] 
system.time(ind.resB4 <- mclapply(setNames(seq_len(ncol(beta_matrix)), dimnames(beta_matrix)[[2]]), RLMtest, meth_matrix=beta_matrix, 
                                  exposure=PHENO[,5] #EXPOSURE (PM2.5)
                                  , X1=PHENO[,8]	# Maternal age -- 18 <-"mage.x"
                                  , X2=PHENO[,9]	# child sex
                                  , X3=PHENO[,10]	# Parity -- 88 <-"parity"
                                  , X4=PHENO[,11]	# Maternal education  -- 78 <-"estudios3c"
                                  , X5=PHENO[,12]	# Maternal smoking during pregnancy
                                  , X6=PHENO[,13]	# Neighborhood ses	
                                  , X7=PHENO[,14]	# season of conception	
                                  , X8=PHENO[,2]	# (cohort)	
                                  , cell1 = omegas[,1]
                                  , cell2 = omegas[,2]
                                  , cell3 = omegas[,3]
                                  , cell4 = omegas[,4]
                                  , cell5 = omegas[,5]
                                  , cell6 = omegas[,6]
                                  , cell7 = omegas[,7]
))
Sys.time()

#Process covariate and reffree adjsuted results
all.resultsB4 <- data.frame(matrix(unlist(ind.resB4), nrow=length(ind.resB4), byrow=TRUE))
# Assignem els noms que hi havia a la llista (la part superior de la llista) al camp probeID
all.resultsB4$probeID <- names(ind.resB4)
# Assignem el nom de les columnes del dataframe
colnames(all.resultsB4) <- c("BETA","SE", "P_VAL", "probeID")
# Ordenem columnes
setcolorder(all.resultsB4, c("probeID","BETA","SE", "P_VAL"))
rm(probelistnamesB4, ind.resB4)

#Lambda calculation
lambdaB4 = qchisq(median(all.resultsB4$P_VAL,na.rm=T), df = 1, lower.tail = F)/
  qchisq(0.5, 1)
## Save analysis sample sizes & lambda:
NB4 = nrow(beta_matrix) #make sure that this is the sample size of the analysis (no missings in covariates)

#Q-Q plots
pdf("PACE_EPIC_ModelB4_QQ_Plot_31-08.pdf")
qq(all.resultsB4$P_VAL,main="PACE_EPIC_QQ-plot")
dev.off()

# export table of results
write.table(all.resultsB4, "PACE_EPIC_ModelB4_31-08.txt",na="NA")
gzip("PACE_EPIC_ModelB4_31-08.txt")

# Export lambda for each
write.table(data.frame(Model = c("A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","A4","B4"), Lambda = c(lambdaA1,lambdaB1,lambdaC1,lambdaD1,lambdaA2,lambdaB2,lambdaC2,lambdaD2,lambdaA3,lambdaB3,lambdaA4,lambdaB4), N=c(NA1,NB1,NC1,ND1,NA2,NB2,NC2,ND2,NA3,NB3,NA4,NB4)), "PACE_EPIC_Lambdas_15-08.txt", na="NA")


#################################################################################
# step 8: Correlation between models with different variables
#################################################################################

## CHECK CPG ORDER! (merge )
check<-c(all.resultsB1, all.resultsB2, all.resultsB3, all.resultsB4, all.resultsC1, all.resultsC2, all.resultsD1, all.resultsD2)
Bmod<-c(all.resultsB1, all.resultsB2, all.resultsB3, all.resultsB4,all.resultsB1, all.resultsB2,all.resultsB1, all.resultsB2)
namesmods<-c("1AB","2AB","3AB","4AB","1AC","2AC","1AD","2AD")
CorrelationCPG_pval<-NULL
CorrelationCPG_betas<-NULL
CorrelationCPG_betas<-rownames(namesmods)
CorrelationCPG_pval<-rownames(namesmods)

for (i in 1:8) {
  #Model B Normality
  B<-Bmod[i]
  norB<-shapiro.test(B$betas)
  FDR<-p.adjust(B$pval, method = "bonferroni")
  # Model to compare normality
  C<-chech[i]
  norC<-shapiro.test(correlationdata$A)
  # data pairing (check order)
  identical(B$probeID,C$probeID)
  correlationdata<-merge(B,C, by.x=B$probeID, by.y=C$probeID)
  if (norB== x & norC==x ){
    #Normal Pearson betas, pvalues
    cor.res<-cor.test(X,Y, method="pearson")
  }else{
    # nonorm spearman
    cor.res<-cor.test(X,Y, method="spearman")
  }
  CorrelationCPG_pval[i,1]<-cor.res
  CorrelationCPG_pval[i,2]<-FDR
  CorrelationCPG_betas[i,1]<-cor.res
  CorrelationCPG_betas[i,2]<-FDR
}

for(i in c(check, Bmod[1:4])){
  Vpdata<-NULL
  Vpdata$log10pval<- -log(i$pval)
  Vpdata$FC<-log2()
  png(paste("Volcano_",str(namemods),".txt"))
  plotVolcano(i[,c(1,2)], test = "G", pAdj = "BH", sigThresh = 0.05, main= paste("volcanoplot of model", namesmods))
  dev.off()
} 


## QC table check new methilation relation omegas sex..


################################################################################
### Summarize probes

descriptives<-function(x){
  tmp<-c(min(x,na.rm=T),quantile(x,probs=c(.1,.25,.5),na.rm=T),mean(x,na.rm=T), median(x,na.rm=T),sd(x,na.rm=T),quantile(x,probs=c(.75,.90),na.rm=T),max(x,na.rm=T),sum(is.na(x)))
  names(tmp)[c(1,5:7,10:11)]<-c("Min.","Mean","Median","SD","Max.","NA")
  return(tmp)
}

desc<-t(apply(beta_matrix,2,descriptives))
write.table(desc, "PACE_STUDYNAME_CpG_summary_date.txt", sep = "\t", col.names = T, row.names = T, append = F, quote=FALSE)


#################################################################################
### Venn diagram  for subjects

polnavec<-as.data.frame(matrix(ncol=0,nrow = 350))
for( i in c(3:7)){
  PHENO[,i][as.vector(PHENO[,i]) == ""] = NA
  polnavec$new<-as.numeric(!is.na(PHENO[,i]))
  names(polnavec)[names(polnavec)=="new"] <- colnames(PHENO[i])
}

colSums(polnavec)

#### Venn diagram per expos

for (cohort in unique(PHENO$cohort.x)){
  a <- vennCounts(!apply(PHENO[PHENO$cohort.x==cohort,69:73]),2,is.na)
  vennDiagram(a);title(cohort)
}
maxlen<-length(colnames(polnavec))
Venndata<-NULL

for (i in c(1,2,3,4,5)){
  if(i<5){
    rg<-(i+1):5
    for (j in rg){
      print(paste(colnames(polnavec)[i],"_",colnames(polnavec)[j]))
      N<-length(which(polnavec[,i]==1 & polnavec[,j]==1))
      print(N)
      Venndata<-c(Venndata, c(colnames(polnavec),N))
    }
  }
}
png("Venndiagram_Subjects_EPIC.png")
vennDiagram(vennCounts(polnavec),circle.col=c("red","green","blue","yellow","purple"))
dev.off()    



#################################################################################
# step 9: Top significant of each model (+annotation)  

pvthresh<- 1e-5

all.resultsA1$Q_VAL<-p.adjust(all.resultsA1$P_VAL, method = "fdr")
SigResA1<-all.resultsA1[all.resultsA1$P_VAL<pvthresh,]
FDR_A1<-all.resultsA1[all.resultsA1$Q_VAL<0.05,]
TopResA1<-SigResA1[order(SigResA1$P_VAL), ]
AnnotA1<-EASIER::get_annotattions(all.resultsA1$probeID,"EPIC","AnotatedA1.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResA1 <- merge(TopResA1,AnnotA1[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResA1<-TopResA1[order(TopResA1$P_VAL),]
length(unique(AnnotA1[AnnotA1$Name %in% FDR_A1$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsA1)
dim(TopResA1)
dim(FDR_A1)
write.table(TopResA1, "PACE_EPIC_ModelA1_15-08_TopResults.txt",na="NA")


all.resultsB1$Q_VAL<-p.adjust(all.resultsB1$P_VAL, method = "fdr")
SigResB1<-all.resultsB1[all.resultsB1$P_VAL<pvthresh,]
FDR_B1<-all.resultsB1[all.resultsB1$Q_VAL<0.05,]
TopResB1<-SigResB1[order(SigResB1$P_VAL), ]
AnnotB1<-EASIER::get_annotattions(all.resultsB1$probeID,"EPIC","AnotatedB1.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResB1 <- merge(TopResB1,AnnotB1[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResB1<-TopResB1[order(TopResB1$P_VAL),]
length(unique(AnnotB1[AnnotB1$Name %in% FDR_B1$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsB1)
dim(TopResB1)
dim(FDR_B1)
write.table(TopResB1, "PACE_EPIC_ModelB1_15-08_TopResults.txt",na="NA")


all.resultsC1$Q_VAL<-p.adjust(all.resultsC1$P_VAL, method = "fdr")
SigResC1<-all.resultsC1[all.resultsC1$P_VAL<pvthresh,]
FDR_C1<-all.resultsC1[all.resultsC1$Q_VAL<0.05,]
TopResC1<-SigResC1[order(SigResC1$P_VAL), ]
AnnotC1<-EASIER::get_annotattions(all.resultsC1$probeID,"EPIC","AnotatedC1.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResC1 <- merge(TopResC1,AnnotC1[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResC1<-TopResC1[order(TopResC1$P_VAL),]
length(unique(AnnotC1[AnnotC1$Name %in% FDR_C1$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsC1)
dim(TopResC1)
dim(FDR_C1)
write.table(TopResC1, "PACE_EPIC_ModelC1_15-08_TopResults.txt",na="NA")

all.resultsD1$Q_VAL<-p.adjust(all.resultsD1$P_VAL, method = "fdr")
SigResD1<-all.resultsD1[all.resultsD1$P_VAL<pvthresh,]
FDR_D1<-all.resultsD1[all.resultsD1$Q_VAL<0.05,]
TopResD1<-SigResD1[order(SigResD1$P_VAL), ]
AnnotD1<-EASIER::get_annotattions(all.resultsD1$probeID,"EPIC","AnotatedD1.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResD1 <- merge(TopResD1,AnnotD1[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResD1<-TopResD1[order(TopResD1$P_VAL),]
length(unique(AnnotD1[AnnotD1$Name %in% FDR_D1$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsD1)
dim(TopResD1)
dim(FDR_D1)
write.table(TopResD1, "PACE_EPIC_ModelD1_15-08_TopResults.txt",na="NA")

all.resultsA2$Q_VAL<-p.adjust(all.resultsA2$P_VAL, method = "fdr")
SigResA2<-all.resultsA2[all.resultsA2$P_VAL<pvthresh,]
FDR_A2<-all.resultsA2[all.resultsA2$Q_VAL<0.05,]
TopResA2<-SigResA2[order(SigResA2$P_VAL), ]
AnnotA2<-EASIER::get_annotattions(all.resultsA2$probeID,"EPIC","AnotatedA2.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResA2 <- merge(TopResA2,AnnotA2[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResA2<-TopResA2[order(TopResA2$P_VAL),]
length(unique(AnnotA2[AnnotA2$Name %in% FDR_A2$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsA2)
dim(TopResA2)
dim(FDR_A2)
write.table(TopResA2, "PACE_EPIC_ModelA2_15-08_TopResults.txt",na="NA")


all.resultsB2$Q_VAL<-p.adjust(all.resultsB2$P_VAL, method = "fdr")
SigResB2<-all.resultsB2[all.resultsB2$P_VAL<pvthresh,]
FDR_B2<-all.resultsB2[all.resultsB2$Q_VAL<0.05,]
TopResB2<-SigResB2[order(SigResB2$P_VAL), ]
AnnotB2<-EASIER::get_annotattions(all.resultsB2$probeID,"EPIC","AnotatedB2.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResB2 <- merge(TopResB2,AnnotB2[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResB2<-TopResB2[order(TopResB2$P_VAL),]
length(unique(AnnotB2[AnnotB2$Name %in% FDR_B2$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsB2)
dim(TopResB2)
dim(FDR_B2)
write.table(TopResB2, "PACE_EPIC_ModelB2_15-08_TopResults.txt",na="NA")


all.resultsC2$Q_VAL<-p.adjust(all.resultsC2$P_VAL, method = "fdr")
SigResC2<-all.resultsC2[all.resultsC2$P_VAL<pvthresh,]
FDR_C2<-all.resultsC2[all.resultsC2$Q_VAL<0.05,]
TopResC2<-SigResC2[order(SigResC2$P_VAL), ]
AnnotC2<-EASIER::get_annotattions(all.resultsC2$probeID,"EPIC","AnotatedC2.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResC2 <- merge(TopResC2,AnnotC2[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResC2<-TopResC2[order(TopResC2$P_VAL),]
length(unique(AnnotC2[AnnotC2$Name %in% FDR_C2$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsC2)
dim(TopResC2)
dim(FDR_C2)
write.table(TopResC2, "PACE_EPIC_ModelC2_15-08_TopResults.txt",na="NA")


all.resultsD2$Q_VAL<-p.adjust(all.resultsD2$P_VAL, method = "fdr")
SigResD2<-all.resultsD2[all.resultsD2$P_VAL<pvthresh,]
FDR_D2<-all.resultsD2[all.resultsD2$Q_VAL<0.05,]
TopResD2<-SigResD2[order(SigResD2$P_VAL), ]
AnnotD2<-EASIER::get_annotattions(all.resultsD2$probeID,"EPIC","AnotatedD2.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResD2 <- merge(TopResD2,AnnotD2[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResD2<-TopResD2[order(TopResD2$P_VAL),]
length(unique(AnnotD2[AnnotD2$Name %in% FDR_D2$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsD2)
dim(TopResD2)
dim(FDR_D2)
write.table(TopResD2, "PACE_EPIC_ModelD2_15-08_TopResults.txt",na="NA")


all.resultsA3$Q_VAL<-p.adjust(all.resultsA3$P_VAL, method = "fdr")
SigResA3<-all.resultsA3[all.resultsA3$P_VAL<pvthresh,]
FDR_A3<-all.resultsA3[all.resultsA3$Q_VAL<0.05,]
TopResA3<-SigResA3[order(SigResA3$P_VAL), ]
AnnotA3<-EASIER::get_annotattions(all.resultsA3$probeID,"EPIC","AnotatedA3.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResA3 <- merge(TopResA3,AnnotA3[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResA3<-TopResA3[order(TopResA3$P_VAL),]
length(unique(AnnotA3[AnnotA3$Name %in% FDR_A3$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsA3)
dim(TopResA3)
dim(FDR_A3)
write.table(TopResA3, "PACE_EPIC_ModelA3_15-08_TopResults.txt",na="NA")

all.resultsB3$Q_VAL<-p.adjust(all.resultsB3$P_VAL, method = "fdr")
SigResB3<-all.resultsB3[all.resultsB3$P_VAL<pvthresh,]
FDR_B3<-all.resultsB3[all.resultsB3$Q_VAL<0.05,]
TopResB3<-SigResB3[order(SigResB3$P_VAL), ]
AnnotB3<-EASIER::get_annotattions(all.resultsB3$probeID,"EPIC","AnotatedB3.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResB3 <- merge(TopResB3,AnnotB3[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResB3<-TopResB3[order(TopResB3$P_VAL),]
length(unique(AnnotB3[AnnotB3$Name %in% FDR_B3$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsB3)
dim(TopResB3)
dim(FDR_B3)
write.table(TopResB3, "PACE_EPIC_ModelB3_15-08_TopResults.txt",na="NA")

all.resultsA4$Q_VAL<-p.adjust(all.resultsA4$P_VAL, method = "fdr")
SigResA4<-all.resultsA4[all.resultsA4$P_VAL<pvthresh,]
FDR_A4<-all.resultsA4[all.resultsA4$Q_VAL<0.05,]
TopResA4<-SigResA4[order(SigResA4$P_VAL), ]
AnnotA4<-EASIER::get_annotattions(all.resultsA4$probeID,"EPIC","AnotatedA4.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResA4 <- merge(TopResA4,AnnotA4[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResA4<-TopResA4[order(TopResA4$P_VAL),]
length(unique(AnnotA4[AnnotA4$Name %in% FDR_A4$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsA4)
dim(TopResA4)
dim(FDR_A4)
write.table(TopResA4, "PACE_EPIC_ModelA4_15-08_TopResults.txt",na="NA")

all.resultsB4$Q_VAL<-p.adjust(all.resultsB4$P_VAL, method = "fdr")
SigResB4<-all.resultsB4[all.resultsB4$P_VAL<pvthresh,]
FDR_B4<-all.resultsB4[all.resultsB4$Q_VAL<0.05,]
TopResB4<-SigResB4[order(SigResB4$P_VAL), ]
AnnotB4<-EASIER::get_annotattions(all.resultsB4$probeID,"EPIC","AnotatedB4.txt","/home/isglobal.lan/jaumatell/data/WS_INMA/Methylation_INMA/PACE/airpollution_placenta/results/INMA/EPIC/Enrichment/")
TopResB4 <- merge(TopResB4,AnnotB4[,c("Name","chr","pos","strand","UCSC_RefGene_Name","Relation_to_Island","UCSC_RefGene_Group")], by.x="probeID", by.y="Name")
TopResB4<-TopResB4[order(TopResB4$P_VAL),]
length(unique(AnnotB4[AnnotB4$Name %in% FDR_B4$probeID,"UCSC_RefGene_Name"]))
dim(all.resultsB4)
dim(TopResB4)
dim(FDR_B4)
write.table(TopResB4, "PACE_EPIC_ModelB4_15-08_TopResults.txt",na="NA")



################################################################################

# remove na !!
Topresults <- Reduce(function(...) merge(..., all=T), list(TopResB1,TopResB2,TopResB3, TopResB4))

Topresults_list<-unique(Topresults$probeID)

write.table(paste(unlist(Topresults_list), collapse="\n"), "PACE_EPIC_Significative_Results_31-08.txt",na="NA")


Topresults_list_UCSC<-unique(Topresults$UCSC_RefGene_Name)

Topresults_list_UCSC<-unique(sapply(Topresults_list_UCSC, function(x) x[1]))

write.table(paste(unlist(Topresults_list_UCSC), collapse="\n"), "PACE_EPIC_Top_Results_19-05_UCSC.txt",na="NA")
################################################################################
# Comparison of significant results with other papers significant results
#################################################################################

matchingdata<-identical(SigResA4&probeID, other_data)
SigResA4[matchingdata,]

#################################################################################
# Functional enrichment analisys of placenta
# from https://github.com/isglobal-brge/EASIER/blob/main/module_scripts/Enrichment.R#L59
#################################################################################
require(EASIER)


## Develop test working directory
# setwd("~/Library/Mobile Documents/com~apple~CloudDocs/PROJECTES/Treballant/EASIER")
# setwd("/Users/mailos/tmp/proves")

########## ----------  VARIABLES DEFINED BY USER  ----------  ##########

# Set working directory to enrichment folder
setwd("./Enrichment")

# Files with CpG data to enrich may be a CpGs list or annotated GWAMA output
FilesToEnrich <- c('./PACE_EPIC_Significative_Results_31-08.txt')

# Values for adjustment
BN <-  TRUE    # Use Bonferroni ?
FDR <- 0.7     # significance level for adjustment, if NA FDR is not used
pvalue <- 0.05 # significance level for p-value, if NA p-value is not used

# Array type, used : EPIC or 450K
# this data is defined for each file to analyse
artype <- c('EPIC')

# Result paths definition for QC, Meta-Analysis and Enrichment
results_folder <- 'QC_Results'
results_gwama <- '.'
results_enrich <- './Enrichment'

# Enrichment type :  'BLOOD' or 'PLACENTA'
#     if enrichtype <- 'BLOOD' => enrichment with :
#                          Cromatine States : BLOOD (crom15)
#                          (To be implemented in future) Partially Methylated Domains (PMD) for Blood
#     if enrichtype <- 'PLACENTA' => enrichment with:
#                          Cromatine States : PLACENTA (FP_15) optionally (FP_18)
#                          Partially Methylated Domains (PMD) for Placenta
#     if enrichtype is different from 'BLOOD' and 'PLACENTA' we only get the missMethyl and MSigDB enrichment and the Unique genes list.
enrichtype <- 'PLACENTA'

# Cromatine States Placenta Enrichment FP_18
# if enrichFP18 = TRUE the enrichment is performed wit FP_15 and FP_18
enrichFP18 <- FALSE

# Test to be used : 'Fisher' or 'Hypergeometric' if testdata is different no test will be performed
testdata <- 'Fisher'

# Perform eQTM enrichment
bEQTM <- FALSE

########## ----------  END VARIABLES DEFINED BY USER  ----------  ##########





## Check if we have any files to enrich and if these files exists
if (length(FilesToEnrich)>=1 & FilesToEnrich[1]!='') {
   for ( i in 1:length(FilesToEnrich))
      if (!file.exists(FilesToEnrich[i])) stop(paste0('File ',FilesToEnrich[i],' does not exsits, please check file' ))
}

## Check variables

if( ! toupper(enrichtype) %in% c('PLACENTA','BLOOD') )
   warning('Only enrichment with MyssMethyl and MSigDB will be done')

if( ! tolower(testdata) %in% c('fisher','hypergeometric') )
   warning('Wrong value for testdata variable, values must be "Fisher" or "Hypergeometric". No test will be performed ')



# Convert relative paths to absolute paths for FilesToEnrich
FilesToEnrich <- unlist(sapply(FilesToEnrich, function(file) { if(substr(file,1,1)!='.' & substr(file,1,1)!='/') file <- paste0('./',file) else file }))
FilesToEnrich <- sapply(FilesToEnrich, tools::file_path_as_absolute)

if(results_enrich!='.'){
   outputfolder <- file.path(getwd(), results_enrich )
}else{
   outputfolder <- file.path(getwd() )}


# Create dir to put results from enrichment
if(!dir.exists(outputfolder))
   suppressWarnings(dir.create(outputfolder))

setwd( outputfolder)

# Get which data we have to enrich
if (length(FilesToEnrich)>=1 & FilesToEnrich[1]!='')
{

   for (i in 1:length(FilesToEnrich)) {

      # Enrich all CpGs
      allCpGs <- FALSE

      # Get data
      data <- NULL
      data <- read.table(FilesToEnrich[i], header = TRUE, sep = "", dec = ".", stringsAsFactors = FALSE)

      # Is a CpG list only ? then read without headers and annotate data
      if(dim(data)[1] <= 1 | dim(data)[2] <= 1) {
         data <- read.table(FilesToEnrich[i], dec = ".") # Avoid header
         data <- as.vector(t(data))
         data <- get_annotattions(data, artype[i], FilesToEnrich[i], outputfolder )
         allCpGs <- TRUE
         data$chromosome <- substr(data$chr,4,length(data$chr))
         data$rs_number <- data$CpGs
      }else {
         if(! "rs_number" %in% colnames(data)) {
            if("CpGs" %in% colnames(data)) {
               data$rs_number = data$CpGs
            }else if("CpGId" %in% colnames(data)) {
               data$rs_number = data$CpGId
            }else {
               stop("Data must contain rs_number, CpGs or CpGId column with CpGs Ids")
            }
         }
      }

      ## -- Functional Enrichmnet
      ## ------------------------

      # Enrichment with missMethyl - GO and KEGG --> Writes results to outputfolder
      miss_enrich <- missMethyl_enrichment(data, outputfolder, FilesToEnrich[i], artype[i], BN, FDR, pvalue, allCpGs, plots = TRUE )

      # get unique genes from data
      geneUniv <- lapply( lapply(miss_enrich[grepl("signif", names(miss_enrich))], function(cpgs) { data[which(as.character(data$CpGs) %in% cpgs),]$UCSC_RefGene_Name}), getUniqueGenes)


      ## -- Online Tools

      # Enrichment with ConsensusPathDB
      #     - Consensus path http://cpdb.molgen.mpg.de/ (gene-set analysis – over-representation analysis)

      # Available FSet types :
      # 1 P     manually curated pathways from pathway databases
      # 2 N     interaction network neighborhood-based functional sets
      # 3 G2    Gene Ontology-based sets, GO level 2
      # 4 G3    Gene Ontology-based sets, GO level 3
      # 5 G4    Gene Ontology-based sets, GO level 4
      # 6 G5    Gene Ontology-based sets, GO level 5
      # 7 C     protein complex-based sets

      acFSet <- c('C', 'P', 'G2', 'G3')
      acType <- 'entrez-gene'

      # Get Enrichment
      CPDB_enrich <- lapply(names(geneUniv), function( data, accFSet, genes ) {
         print(data)
         lapply(accFSet,
                get_consensusPdb_OverRepresentation,
                entityType='genes',
                accNumbers=na.omit(as.character(eval(parse(text = paste0("genes$",data))))),
                accType=acType,
                outputdir = "ConsensusPathDB",
                outputfile = gsub(".", "_", data, fixed=TRUE) )},
         accFSet = acFSet, genes = geneUniv)

      names(CPDB_enrich) <- names(geneUniv)


      ## -- Molecular Enrichmnet
      ## -----------------------

      # Molecular Signatures Database enrichment
      msd_enrich <- MSigDB_enrichment(data, outputfolder, FilesToEnrich[i], artype[i], BN, FDR, pvalue, allCpGs)


      if("FDR" %in% colnames(data) | "Bonferroni" %in% colnames(data) |  "p.val" %in% colnames(data))
      {

         ## -- Prepare data
         ## ---------------

         # Classify by Hyper and Hypo methylated
         data$meth_state <- getHyperHypo(data$beta) # Classify methylation into Hyper and Hypo


         if("FDR" %in% colnames(data) & !is.na(FDR) )
         {
            # Add column bFDR to data for that CpGs that accomplish with FDR
            data$bFDR <- getBinaryClassificationYesNo(data$FDR, "<", FDR) # Classify fdr into "yes" and no taking into account FDR significance level

            # CpGs FDR and Hyper and Hypo respectively
            FDR_Hyper <- ifelse(data$bFDR == 'yes' & data$meth_state=='Hyper', "yes", "no")
            FDR_Hypo <- ifelse(data$bFDR == 'yes' & data$meth_state=='Hypo', "yes", "no")
         }

         if("Bonferroni" %in% colnames(data) & BN==TRUE)
         {
            # CpGs Bonferroni and Hyper and Hypo respectively
            BN_Hyper <- ifelse(data$Bonferroni == 'yes' & data$meth_state=='Hyper', "yes", "no")
            BN_Hypo <- ifelse(data$Bonferroni == 'yes' & data$meth_state=='Hypo', "yes", "no")
         }


         if("p.val" %in% colnames(data) & !is.na(pvalue) )
         {

            # Add column bpval to data for that CpGs that accomplish with FDR
            data$bpval <- getBinaryClassificationYesNo(data$p.value, "<", pval) # Classify fdr into "yes" and no taking into account FDR significance level

            # CpGs FDR and Hyper and Hypo respectively
            pval_Hyper <- ifelse(data$bpval == 'yes' & data$meth_state=='Hyper', "yes", "no")
            pval_Hypo <- ifelse(data$bpval == 'yes' & data$meth_state=='Hypo', "yes", "no")
         }


         ## TODO: Simplify this code with only one function x option (fisher - Geometric // BN - FDR )

         # For FDR
         if("FDR" %in% colnames(data) & !is.na(FDR) )
         {

            ## --  CpG Gene position
            ## ---------------------

            # Get descriptives
            get_descriptives_GenePosition(data$UCSC_RefGene_Group, data$bFDR , "FDR", outputdir = "GenePosition/Fisher_FDR_Desc", outputfile = FilesToEnrich[i])

            if( tolower(testdata) =='fisher') {
               ## --  Fisher Test - Gene position - FDR, FDR_hyper and FDR_hypo
               GenePosition <- getAllFisherTest(data$bFDR, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_FDR", outputfile = FilesToEnrich[i], plots = TRUE )
               GenePosition_hyper <- getAllFisherTest(FDR_Hyper, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_FDRHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               GenePosition_hypo <- getAllFisherTest(FDR_Hypo, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_FDRHypo", outputfile = FilesToEnrich[i], plots = TRUE )
            }
            else if ( tolower(testdata) =='hypergeometric') {
               ## --  HyperGeometric Test - Island relative position - FDR, FDR_hyper and FDR_hypo (for Depletion and Enrichment)
               GenePosition <- getAllHypergeometricTest(data$bFDR, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_FDR", outputfile = FilesToEnrich[i])
               GenePosition_hyper <- getAllHypergeometricTest(FDR_Hyper, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_FDRHyper", outputfile = FilesToEnrich[i])
               GenePosition_hypo <- getAllHypergeometricTest(FDR_Hypo, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_FDRHypo", outputfile = FilesToEnrich[i])
            }

            plot_TestResults_Collapsed(list(fdr = GenePosition, fdr_hypo = GenePosition_hypo, fdr_hyper = GenePosition_hyper),
                                       outputdir = "GenePosition", outputfile = FilesToEnrich[i], main = )

            ## --  CpG Island relative position
            ## --------------------------------

            # Get descriptives
            get_descriptives_RelativetoIsland(data$Relation_to_Island, data$bFDR , "FDR", outputdir = "RelativeToIsland/Fisher_FDR_RelativeToIsland", outputfile = FilesToEnrich[i])

            if( tolower(testdata) =='fisher') {
               ## --  Fisher Test - Position Relative to Island - FDR, FDR_hyper and FDR_hypo
               relative_island <- getAllFisherTest(data$bFDR, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_FDR", outputfile = FilesToEnrich[i], plots = TRUE )
               relative_island_hyper <- getAllFisherTest(FDR_Hyper, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_FDRHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               relative_island_hypo <- getAllFisherTest(FDR_Hypo, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_FDRHypo", outputfile = FilesToEnrich[i], plots = TRUE )
            }
            else if ( tolower(testdata) =='hypergeometric') {
               ## --  HyperGeometric Test - Gene position - FDR, FDR_hyper and FDR_hypo (for Depletion and Enrichment)
               relative_island <- getAllHypergeometricTest(data$bFDR, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_FDR", outputfile = FilesToEnrich[i])
               relative_island_hyper <- getAllHypergeometricTest(FDR_Hyper, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_FDRHyper", outputfile = FilesToEnrich[i])
               relative_island_hypo <- getAllHypergeometricTest(FDR_Hypo, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_FDRHypo", outputfile = FilesToEnrich[i])
            }
            plot_TestResults_Collapsed(list(bn = relative_island, bn_hypo = relative_island_hypo, bn_hyper = relative_island_hyper),
                                       outputdir = "RelativeToIsland", outputfile = FilesToEnrich[i], main = )


         }

         # For Bonferroni
         if("Bonferroni" %in% colnames(data) & BN==TRUE)
         {

            ## --  CpG Gene position
            ## ---------------------

            get_descriptives_GenePosition(data$UCSC_RefGene_Group, data$Bonferroni, "Bonferroni", outputdir = "GenePosition/Fisher_BN_Desc", outputfile = FilesToEnrich[i])

            # For BN
            if( tolower(testdata) =='fisher') {
               ## --  Fisher Test - Gene position - FDR, FDR_hyper and FDR_hypo
               GenePosition <- getAllFisherTest(data$Bonferroni, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_BN", outputfile = FilesToEnrich[i], plots = TRUE )
               GenePosition_hyper <- getAllFisherTest(BN_Hyper, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_BNHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               GenePosition_hypo <- getAllFisherTest(BN_Hypo, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_BNHypo", outputfile = FilesToEnrich[i], plots = TRUE )
            }
            else if ( tolower(testdata) =='hypergeometric') {
               ## --  HyperGeometric Test - Island relative position - FDR, FDR_hyper and FDR_hypo (for Depletion and Enrichment)
               GenePosition <- getAllHypergeometricTest(data$Bonferroni, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_BN", outputfile = FilesToEnrich[i])
               GenePosition_hyper <- getAllHypergeometricTest(BN_Hyper, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_BNHyper", outputfile = FilesToEnrich[i])
               GenePosition_hypo <- getAllHypergeometricTest(BN_Hypo, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_BNHypo", outputfile = FilesToEnrich[i])
            }

            plot_TestResults_Collapsed(list(fdr = GenePosition, fdr_hypo = GenePosition_hypo, fdr_hyper = GenePosition_hyper),
                                       outputdir = "GenePosition", outputfile = FilesToEnrich[i], main = )

            ## --  CpG Island relative position
            ## --------------------------------

            # Get descriptives
            get_descriptives_RelativetoIsland(data$Relation_to_Island, data$Bonferroni, "Bonferroni", outputdir = "RelativeToIsland/Fisher_BN_RelativeToIsland", outputfile = FilesToEnrich[i])

            if( tolower(testdata) =='fisher') {
               ## --  Fisher Test - Position Relative to Island - FDR, FDR_hyper and FDR_hypo
               relative_island <- getAllFisherTest(data$Bonferroni, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_BN", outputfile = FilesToEnrich[i], plots = TRUE )
               relative_island_hyper <- getAllFisherTest(BN_Hyper, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_BNHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               relative_island_hypo <- getAllFisherTest(BN_Hypo, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_BNHypo", outputfile = FilesToEnrich[i], plots = TRUE )
            }
            else if ( tolower(testdata) =='hypergeometric') {
               ## --  HyperGeometric Test - Gene position - FDR, FDR_hyper and FDR_hypo (for Depletion and Enrichment)
               relative_island <- getAllHypergeometricTest(data$Bonferroni, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_BN", outputfile = FilesToEnrich[i])
               relative_island_hyper <- getAllHypergeometricTest(BN_Hyper, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_BNHyper", outputfile = FilesToEnrich[i])
               relative_island_hypo <- getAllHypergeometricTest(BN_Hypo, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_BNHypo", outputfile = FilesToEnrich[i])
            }
            plot_TestResults_Collapsed(list(bn = relative_island, bn_hypo = relative_island_hypo, bn_hyper = relative_island_hyper),
                                       outputdir = "RelativeToIsland", outputfile = FilesToEnrich[i], main = )

         }

         # For pvalue
         if("p.val" %in% colnames(data) & !is.na(pvalue) )
         {

            ## --  CpG Gene position
            ## ---------------------

            # Get descriptives
            get_descriptives_GenePosition(data$UCSC_RefGene_Group, data$bpval , "p.value", outputdir = "GenePosition/Fisher_pval_Desc", outputfile = FilesToEnrich[i])

            if( tolower(testdata) =='fisher') {
               ## --  Fisher Test - Gene position - pval, pval_hyper and pval_hypo
               GenePosition <- getAllFisherTest(data$bpval, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_pval", outputfile = FilesToEnrich[i], plots = TRUE )
               GenePosition_hyper <- getAllFisherTest(pval_Hyper, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_pvalHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               GenePosition_hypo <- getAllFisherTest(pval_Hypo, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_pvalHypo", outputfile = FilesToEnrich[i], plots = TRUE )
            }
            else if ( tolower(testdata) =='hypergeometric') {
               ## --  HyperGeometric Test - Island relative position - pval, pval_hyper and pval_hypo (for Depletion and Enrichment)
               GenePosition <- getAllHypergeometricTest(data$bpval, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_pval", outputfile = FilesToEnrich[i])
               GenePosition_hyper <- getAllHypergeometricTest(pval_Hyper, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_pvalHyper", outputfile = FilesToEnrich[i])
               GenePosition_hypo <- getAllHypergeometricTest(pval_Hypo, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_pvalHypo", outputfile = FilesToEnrich[i])
            }

            plot_TestResults_Collapsed(list(pval = GenePosition, pval_hypo = GenePosition_hypo, pval_hyper = GenePosition_hyper),
                                       outputdir = "GenePosition", outputfile = FilesToEnrich[i], main = )

            ## --  CpG Island relative position
            ## --------------------------------

            # Get descriptives
            get_descriptives_RelativetoIsland(data$Relation_to_Island, data$bpval , "p.value", outputdir = "RelativeToIsland/Fisher_pval_RelativeToIsland", outputfile = FilesToEnrich[i])

            if( tolower(testdata) =='fisher') {
               ## --  Fisher Test - Position Relative to Island - pval, pval_hyper and pval_hypo
               relative_island <- getAllFisherTest(data$bpval, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_pval", outputfile = FilesToEnrich[i], plots = TRUE )
               relative_island_hyper <- getAllFisherTest(pval_Hyper, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_pvalHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               relative_island_hypo <- getAllFisherTest(pval_Hypo, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_pvalHypo", outputfile = FilesToEnrich[i], plots = TRUE )
            }
            else if ( tolower(testdata) =='hypergeometric') {
               ## --  HyperGeometric Test - Gene position - pval, pval_hyper and pval_hypo (for Depletion and Enrichment)
               relative_island <- getAllHypergeometricTest(data$bpval, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_pval", outputfile = FilesToEnrich[i])
               relative_island_hyper <- getAllHypergeometricTest(pval_Hyper, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_pvalHyper", outputfile = FilesToEnrich[i])
               relative_island_hypo <- getAllHypergeometricTest(pval_Hypo, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_pvalHypo", outputfile = FilesToEnrich[i])
            }
            plot_TestResults_Collapsed(list(bn = relative_island, bn_hypo = relative_island_hypo, bn_hyper = relative_island_hyper),
                                       outputdir = "RelativeToIsland", outputfile = FilesToEnrich[i], main = )


         }


      } else {

         ## -- Prepare data
         ## ---------------

         # * Create dataframe with non significative CpGs attending to artype ('EPIC' or '450K')
         #     - Get gene position tests
         #     - Get CpG Island relative position ests

         # Get
         unsignif_df <- get_annotation_unlisted_CpGs(data$rs_number, artype[i])

         data$signif <- 'yes'
         unsignif_df$signif <- 'no'

         data <- rbind(data[,c(2:47, 50)], as.data.frame(unsignif_df) )
         data$rs_number <- data$Name


         ## TODO: Simplify this code with only one function x option (fisher - Geometric // BN - FDR )

         ## --  CpG Gene position
         ## ---------------------

         # Get descriptives
         get_descriptives_GenePosition(data$UCSC_RefGene_Group, data$signif , "CpGlist", outputdir = "GenePosition/Fisher_CpGlist_Desc", outputfile = FilesToEnrich[i])

         if( tolower(testdata) =='fisher') {
            GenePosition <- getAllFisherTest(data$signif, data$UCSC_RefGene_Group, outputdir = "GenePosition/Fisher_CpGlist", outputfile = FilesToEnrich[i], plots = TRUE )
         }else if ( tolower(testdata) =='hypergeometric') {
            GenePosition <- getAllHypergeometricTest(data$signif, data$UCSC_RefGene_Group, outputdir = "GenePosition/HyperG_CpGlist", outputfile = FilesToEnrich[i])
         }

         #..# plot_RelativetoIsland(GenePosition, outputdir = "GenePosition", outputfile = paste0("CpGlist_",FilesToEnrich[i]), main = )
         plot_GenePosition(GenePosition, outputdir = "GenePosition", outputfile = paste0("CpGlist_",FilesToEnrich[i]), main = )

         ## --  CpG Island relative position
         ## --------------------------------

         # Get descriptives
         get_descriptives_RelativetoIsland(data$Relation_to_Island, data$signif , "CpGlist", outputdir = "RelativeToIsland/Fisher_CpGlist_RelativeToIsland", outputfile = FilesToEnrich[i])

         if( tolower(testdata) =='fisher') {
            relative_island <- getAllFisherTest(data$signif, data$Relation_to_Island, outputdir = "RelativeToIsland/Fisher_CpGlist", outputfile = FilesToEnrich[i], plots = TRUE )
         } else {
            relative_island <- getAllHypergeometricTest(data$signif, data$Relation_to_Island, outputdir = "RelativeToIsland/HyperG_CpGlist", outputfile = FilesToEnrich[i])
         }

         plot_OR(relative_island, outputdir = "RelativeToIsland", outputfile = paste0("CpGlist_",FilesToEnrich[i]), main = )

         #..# plot_TestResults_Collapsed(list(relat = relative_island),
         #..#                            outputdir = "RelativeToIsland", outputfile = paste0("CpGlist_",FilesToEnrich[i]), main = )

      }





      ## ----------------------
      ## -- BLOOD ENRICHMENT --
      ## ----------------------

      if ( toupper(enrichtype) == 'BLOOD' )
      {
         ## --  ROADMAP  -  Metilation in Cromatine States - BLOOD
         ## -------------------------------------------------------
         ##       Analysis of methylation changes in the different chromatin states (CpGs are diff meth in some states and others don't)

         # Prepare data
         crom_data <- addCrom15Columns(data, "rs_number") # Adds chromatine state columns

         # Columns with chromatin status information :
         ChrStatCols <- c("TssA","TssAFlnk","TxFlnk","TxWk","Tx","EnhG","Enh","ZNF.Rpts","Het","TssBiv","BivFlnk","EnhBiv","ReprPC","ReprPCWk","Quies")

         if("FDR" %in% colnames(data) | "Bonferroni" %in% colnames(data) | "p.val" %in% colnames(data) & (BN==TRUE | !is.na(FDR) | !is.na(pvalue)))
         {

            if( !is.na(FDR) ) {
               chrom_states_fdr <- getAllChromStateOR( crom_data$bFDR, crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_FDR", outputfile = FilesToEnrich[i], plots = TRUE )
               chrom_states_fdr_hyper <- getAllChromStateOR( FDR_Hyper[which(data$rs_number %in% crom_data$rs_number)], crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_FDRHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               chrom_states_fdr_hypo <- getAllChromStateOR( FDR_Hypo[which(data$rs_number %in% crom_data$rs_number)], crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_FDRHypo", outputfile = FilesToEnrich[i], plots = TRUE )

               plot_TestResults_Collapsed(list(fdr = chrom_states_fdr, fdr_hypo = chrom_states_fdr_hypo, fdr_hyper = chrom_states_fdr_hyper),
                                          outputdir = "ChrSates_15_Blood", outputfile = FilesToEnrich[i], main = )
            }
            if ( BN == TRUE) {
               chrom_states_bn <- getAllChromStateOR( crom_data$Bonferroni, crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_BN", outputfile = FilesToEnrich[i], plots = TRUE )
               chrom_states_bn_hyper <- getAllChromStateOR( BN_Hyper[which(data$rs_number %in% crom_data$rs_number)], crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_BNHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               chrom_states_bn_hypo <- getAllChromStateOR( BN_Hypo[which(data$rs_number %in% crom_data$rs_number)], crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_BNHypo", outputfile = FilesToEnrich[i], plots = TRUE )

               plot_TestResults_Collapsed(list(bn = chrom_states_bn, bn_hypo = chrom_states_bn_hypo, bn_hyper = chrom_states_bn_hyper),
                                          outputdir = "ChrSates_15_Blood", outputfile = FilesToEnrich[i], main = )
            }
            if( !is.na(pvalue) ) {
               chrom_states_pval <- getAllChromStateOR( crom_data$bpval, crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_pval", outputfile = FilesToEnrich[i], plots = TRUE )
               chrom_states_pval_hyper <- getAllChromStateOR( pval_Hyper[which(data$rs_number %in% crom_data$rs_number)], crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_pvalHyper", outputfile = FilesToEnrich[i], plots = TRUE )
               chrom_states_pval_hypo <- getAllChromStateOR( pval_Hypo[which(data$rs_number %in% crom_data$rs_number)], crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_pvalHypo", outputfile = FilesToEnrich[i], plots = TRUE )

               plot_TestResults_Collapsed(list(pval = chrom_states_pval, pval_hypo = chrom_states_pval_hypo, pval_hyper = chrom_states_pval_hyper),
                                          outputdir = "ChrSates_15_Blood", outputfile = FilesToEnrich[i], main = )
            }
         } else {

            chrom_states <- getAllChromStateOR( crom_data$signif, crom_data[,ChrStatCols], outputdir = "ChrSates_15_Blood/OR_CpGlist", outputfile = FilesToEnrich[i], plots = TRUE )
            #..# plot_chromosomestate(chrom_states, outputdir = "ChrSates_15_Blood", outputfile = FilesToEnrich[i], main = )
         }


         # Add bEQTM enrichment
         if(bEQTM == TRUE)
         {
            geteQTMEnrichment(crom_data)
            ## Obtenir el llistat de gnes
            ## fer l'enriquiment d'aquests gens amb GO ¿¿?? per indentificar paths??
         }



      }


      ## -------------------------
      ## -- PLACENTA ENRICHMENT --
      ## -------------------------

      if ( toupper(enrichtype) == 'PLACENTA' )
      {

         ## -- ROADMAP  -  Regulatory feature enrichment analysis - PLACENTA
         ## -----------------------------------------------------------------

         # Adds rs_number column if not in dataframe
         if(! "rs_number" %in% colnames(data)){
            data$rs_number <- data$CpGs}

         # Convert to Genomic Ranges
         data.GRange <- GRanges(
            seqnames = Rle(data$chr),
            ranges=IRanges(data$pos, end=data$pos),
            name=data$rs_number,
            chr=data$chr,
            pos=data$pos
         )
         names(data.GRange) <- data.GRange$name

         # Find overlaps between CpGs and Fetal Placenta (States 15 and 18)
         over15 <- findOverlapValues(data.GRange, FP_15_E091 )

         if (enrichFP18 == TRUE){
            over18 <- findOverlapValues(data.GRange, FP_18_E091 )
            # Add states 15 and 18 to data.GRange file and write to a file : CpGs, state15 and state18
            data.chrstates <- c(mcols(over15$ranges), over15$values, over18$values)
            colnames(data.chrstates)[grep("States",colnames(data.chrstates))] <-  c("States15_FP", "States18_FP")
         } else {
            # Add states 15 to data.GRange file and write to a file : CpGs, state15
            data.chrstates <- c(mcols(over15$ranges), over15$values)
            colnames(data.chrstates)[grep("States",colnames(data.chrstates))] <-  c("States15_FP")
         }

         # Merge annotated data with chromatine states with states with data
         crom_data <- merge(data, data.chrstates, by.x = "rs_number", by.y = "name" )

         fname <- paste0("ChrSates_Pla_data/List_CpGs_",
                         tools::file_path_sans_ext(basename(FilesToEnrich[i])),
                         "_annot_plac_chr_states.txt")
         dir.create("ChrSates_Pla_data", showWarnings = FALSE)
         write.table( crom_data, fname, quote=F, row.names=F, sep="\t")

         if("FDR" %in% colnames(data) | "Bonferroni" %in% colnames(data) & (BN==TRUE | !is.na(FDR) ))
         {

            if( tolower(testdata) =='fisher') {

               if( !is.na(FDR) ) {
                  ## --  HyperGeometric Test - States15_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                  States15FP_fdr <- getAllFisherTest(crom_data$bFDR , crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Fisher_FDR", outputfile = FilesToEnrich[i])
                  States15FP_fdrhyper <- getAllFisherTest(FDR_Hyper, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Fisher_FDRHyper", outputfile = FilesToEnrich[i])
                  States15FP_fdrhypo <- getAllFisherTest(FDR_Hypo, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Fisher_FDRHypo", outputfile = FilesToEnrich[i])
               }

               if ( BN == TRUE) {
                  ## --  HyperGeometric Test - States15_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                  States15FP_bn <- getAllFisherTest(crom_data$Bonferroni, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Fisher_BN", outputfile = FilesToEnrich[i])
                  States15FP_bnhyper <- getAllFisherTest(BN_Hyper, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Fisher_BNHyper", outputfile = FilesToEnrich[i])
                  States15FP_bnhypo <- getAllFisherTest(BN_Hypo, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Fisher_BNHypo", outputfile = FilesToEnrich[i])
               }


            } else if ( tolower(testdata) =='hypergeometric') {

               if( !is.na(FDR) ) {
                  ## --  HyperGeometric Test - States15_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                  States15FP_fdr <- getAllHypergeometricTest(crom_data$FDR, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/HyperG_FDR", outputfile = FilesToEnrich[i])
                  States15FP_fdrhyper <- getAllHypergeometricTest(FDR_Hyper, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/HyperG_FDRHyper", outputfile = FilesToEnrich[i])
                  States15FP_fdrhypo <- getAllHypergeometricTest(FDR_Hypo, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/HyperG_FDRHypo", outputfile = FilesToEnrich[i])

                  ## --  Resume in a table - HyperGeometric Test - States15_FP - FDR
                  resdata <- summary_States_FP_Table( crom_data$FDR, FDR_Hyper, FDR_Hypo, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Summary_HyperG_FDR", outputfile = FilesToEnrich[i], plot = TRUE )

                  ## --  Plot collapsed data HyperGeometric Test - States15_FP - FDR
                  plot_TestResults_Collapsed(list(fdr = hypergeo_States15FP_fdr, fdr_hypo = hypergeo_States15FP_fdrhypo, fdr_hyper = hypergeo_States15FP_fdrhyper),
                                             outputdir = "ChrSates_15_Pla", outputfile = FilesToEnrich[i])
               }

               if ( BN == TRUE) {
                  ## --  HyperGeometric Test - States15_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                  States15FP_bn <- getAllHypergeometricTest(crom_data$Bonferroni, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/HyperG_BN", outputfile = FilesToEnrich[i])
                  States15FP_bnhyper <- getAllHypergeometricTest(BN_Hyper, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/HyperG_BNHyper", outputfile = FilesToEnrich[i])
                  States15FP_bnhypo <- getAllHypergeometricTest(BN_Hypo, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/HyperG_BNHypo", outputfile = FilesToEnrich[i])

                  ## --  Resume in a table - HyperGeometric Test - States15_FP - BN
                  resdata <- summary_States_FP_Table( crom_data$Bonferroni, BN_Hyper, BN_Hypo, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Summary_HyperG_BN", outputfile = FilesToEnrich[i], plot = TRUE )
               }
            }


            if ( !is.na(FDR) )  {
               ## --  Plot collapsed data HyperGeometric Test - States15_FP - FDR
               plot_TestResults_Collapsed(list(fdr = States15FP_fdr, fdr_hypo = States15FP_fdrhypo, fdr_hyper = States15FP_fdrhyper),
                                          outputdir = "ChrSates_15_Pla", outputfile = FilesToEnrich[i])
            }

            if ( BN == TRUE) {
               ## --  Plot collapsed data HyperGeometric Test - States15_FP - BN
               plot_TestResults_Collapsed(list(bn = States15FP_bn, bn_hypo = States15FP_bnhypo, bn_hyper = States15FP_bnhyper),
                                          outputdir = "ChrSates_15_Pla", outputfile = FilesToEnrich[i])
            }



            if(enrichFP18 == TRUE)
            {
               if( tolower(testdata) =='fisher') {

                  if( !is.na(FDR) ) {
                     ## --  HyperGeometric Test - States18_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                     States18FP_fdr <- getAllFisherTest(crom_data$bFDR , crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Fisher_FDR", outputfile = FilesToEnrich[i])
                     States18FP_fdrhyper <- getAllFisherTest(FDR_Hyper, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Fisher_FDRHyper", outputfile = FilesToEnrich[i])
                     States18FP_fdrhypo <- getAllFisherTest(FDR_Hypo, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Fisher_FDRHypo", outputfile = FilesToEnrich[i])
                  }

                  if ( BN == TRUE) {
                     ## --  HyperGeometric Test - States18_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                     States18FP_bn <- getAllFisherTest(crom_data$Bonferroni, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Fisher_BN", outputfile = FilesToEnrich[i])
                     States18FP_bnhyper <- getAllFisherTest(BN_Hyper, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Fisher_BNHyper", outputfile = FilesToEnrich[i])
                     States18FP_bnhypo <- getAllFisherTest(BN_Hypo, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Fisher_BNHypo", outputfile = FilesToEnrich[i])
                  }

               } else if ( tolower(testdata) =='hypergeometric') {

                  if( !is.na(FDR) ) {
                     ## --  HyperGeometric Test - States18_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                     States18FP_fdr <- getAllHypergeometricTest(crom_data$FDR, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/HyperG_FDR", outputfile = FilesToEnrich[i])
                     States18FP_fdrhyper <- getAllHypergeometricTest(FDR_Hyper, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/HyperG_FDRHyper", outputfile = FilesToEnrich[i])
                     States18FP_fdrhypo <- getAllHypergeometricTest(FDR_Hypo, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/HyperG_FDRHypo", outputfile = FilesToEnrich[i])

                     ## --  Resume in a table - HyperGeometric Test - States18_FP - BN
                     resdata <- summary_States_FP_Table( crom_data$FDR, FDR_Hyper, FDR_Hypo, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Summary_HyperG_FDR", outputfile = FilesToEnrich[i], plot = TRUE )
                  }

                  if ( BN == TRUE) {
                     ## --  HyperGeometric Test - States18_FP - BN,  BN_hyper and BN_hypo (Depletion and Enrichment)
                     States18FP_bn <- getAllHypergeometricTest(crom_data$Bonferroni, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/HyperG_BN", outputfile = FilesToEnrich[i])
                     States18FP_bnhyper <- getAllHypergeometricTest(BN_Hyper, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/HyperG_BNHyper", outputfile = FilesToEnrich[i])
                     States18FP_bnhypo <- getAllHypergeometricTest(BN_Hypo, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/HyperG_BNHypo", outputfile = FilesToEnrich[i])

                     ## --  Resume in a table - HyperGeometric Test - States18_FP - BN
                     resdata <- summary_States_FP_Table( crom_data$Bonferroni, BN_Hyper, BN_Hypo, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Summary_HyperG_BN", outputfile = FilesToEnrich[i], plot = TRUE )
                  }
               }

               if ( !is.na(FDR) )  {
                  ## --  Plot collapsed data HyperGeometric Test - States15_FP - FDR
                  plot_TestResults_Collapsed(list(fdr = States18FP_fdr, fdr_hypo = States18FP_fdrhypo, fdr_hyper = States18FP_fdrhyper),
                                             outputdir = "ChrSates_18_Pla", outputfile = FilesToEnrich[i])
               }

               if ( BN == TRUE) {
                  ## --  Plot collapsed data HyperGeometric Test - States15_FP - BN
                  plot_TestResults_Collapsed(list(bn = States18FP_bn, bn_hypo = States18FP_bnhypo, bn_hyper = States18FP_bnhyper),
                                             outputdir = "ChrSates_18_Pla", outputfile = FilesToEnrich[i])
               }

            }
         }else {

            if( tolower(testdata) =='fisher') {
               States15FP <- getAllFisherTest(crom_data$signif , crom_data$States15_FP, outputdir = "ChrSates_15_Pla/Fisher_CpGlist", outputfile = FilesToEnrich[i])
            } else if ( tolower(testdata) =='hypergeometric') {
               States15FP <- getAllHypergeometricTest(crom_data$signif, crom_data$States15_FP, outputdir = "ChrSates_15_Pla/HyperG_CpGlist", outputfile = FilesToEnrich[i])
            }

            ## --  Plot collapsed data HyperGeometric Test - States15_FP - FDR
            #....CREC QUE NO ES NECESSARI.... # plot_OR(signif = States15FP, outputdir = "ChrSates_15_Pla", outputfile = FilesToEnrich[i])


            if(enrichFP18 == TRUE)
            {
               if( tolower(testdata) =='fisher') {
                  States18FP <- getAllFisherTest(crom_data$signif , crom_data$States18_FP, outputdir = "ChrSates_18_Pla/Fisher_CpGlist", outputfile = FilesToEnrich[i])
               } else if ( tolower(testdata) =='hypergeometric') {
                  States18FP <- getAllHypergeometricTest(crom_data$signif, crom_data$States18_FP, outputdir = "ChrSates_18_Pla/HyperG_CpGlist", outputfile = FilesToEnrich[i])
               }

               ## --  Plot collapsed data HyperGeometric Test - States15_FP - FDR
               #....CREC QUE NO ES NECESSARI.... # plot_TestResults_Collapsed(list(signif = States18FP), outputdir = "ChrSates_18_Pla", outputfile = FilesToEnrich[i])
            }

         }


         ## -- Partially Methylated Domains (PMDs) PLACENTA
         ## ------------------------------------------------

         # Create genomic ranges from PMD data
         PMD.GRange <- getEnrichGenomicRanges(PMD_placenta$Chr_PMD, PMD_placenta$Start_PMD, PMD_placenta$End_PMD)

         # Find overlaps between CpGs and PMD (find subject hits, query hits )
         overPMD <- findOverlapValues(data.GRange, PMD.GRange )

         #Create a data.frame with CpGs and PMDs information
         mdata <- as.data.frame(cbind(DataFrame(CpG = data.GRange$name[overPMD$qhits]), DataFrame(PMD = PMD.GRange$name[overPMD$shits])))

         # Merge with results from meta-analysis (A2)
         crom_data <- merge(crom_data, mdata, by.x="rs_number", by.y="CpG",all=T)
         # crom_data <- crom_data[order(crom_data$p.value),]

         # CpGs with PMD as NA
         PMD_NaN <- ifelse(is.na(crom_data$PMD),'IsNA','NotNA' )

         if("FDR" %in% colnames(data) | "Bonferroni" %in% colnames(data) & (BN==TRUE | !is.na(FDR) ))
         {

            if( tolower(testdata) =='fisher') {

               if( !is.na(FDR) ) {
                  ## --  HyperGeometric Test - PMD - FDR,  FDR_hyper and FDR_hypo  (Full data ) (Depletion and Enrichment)
                  PMD_fdr <- getAllFisherTest(crom_data$bFDR, PMD_NaN, outputdir = "PMD_Pla/Fisher_FDR", outputfile = FilesToEnrich[i])
                  PMD_fdrhyper <- getAllFisherTest(FDR_Hyper, PMD_NaN, outputdir = "PMD_Pla/Fisher_FDRHyper", outputfile = FilesToEnrich[i])
                  PMD_fdrhypo <- getAllFisherTest(FDR_Hypo, PMD_NaN, outputdir = "PMD_Pla/Fisher_FDRHypo", outputfile = FilesToEnrich[i])
               }
               if ( BN == TRUE) {
                  ## --  HyperGeometric Test - PMD - BN,  BN_hyper and BN_hypo  (Full data ) (Depletion and Enrichment)
                  PMD_bn <- getAllFisherTest(crom_data$Bonferroni, PMD_NaN, outputdir = "PMD_Pla/Fisher_BN", outputfile = FilesToEnrich[i])
                  PMD_bnhyper <- getAllFisherTest(BN_Hyper, PMD_NaN, outputdir = "PMD_Pla/Fisher_BNHyper", outputfile = FilesToEnrich[i])
                  PMD_bnhypo <- getAllFisherTest(BN_Hypo, PMD_NaN, outputdir = "PMD_Pla/Fisher_BNHypo", outputfile = FilesToEnrich[i])
               }

            } else if ( tolower(testdata) =='hypergeometric') {

               if( !is.na(FDR) ) {
                  ## --  HyperGeometric Test - PMD - FDR,  FDR_hyper and FDR_hypo  (Full data ) (Depletion and Enrichment)
                  PMD_fdr <- getAllHypergeometricTest(crom_data$bFDR, PMD_NaN, outputdir = "PMD_Pla/HyperG_FDR", outputfile = FilesToEnrich[i])
                  PMD_fdrhyper <- getAllHypergeometricTest(FDR_Hyper, PMD_NaN, outputdir = "PMD_Pla/HyperG_FDRHyper", outputfile = FilesToEnrich[i])
                  PMD_fdrhypo <- getAllHypergeometricTest(FDR_Hypo, PMD_NaN, outputdir = "PMD_Pla/HyperG_FDRHypo", outputfile = FilesToEnrich[i])
                  # Summary
                  resdata <- summary_HyperGeometrics_Table( crom_data$bFDR, FDR_Hyper, FDR_Hypo, PMD_NaN, outputdir = "PMD_Pla/Summary_HyperG_FDR", outputfile = FilesToEnrich[i], plot = TRUE )
               }

               if ( BN == TRUE) {
                  ## --  HyperGeometric Test - PMD - BN,  BN_hyper and BN_hypo  (Full data ) (Depletion and Enrichment)
                  PMD_bn <- getAllHypergeometricTest(crom_data$Bonferroni, PMD_NaN, outputdir = "PMD_Pla/HyperG_BN", outputfile = FilesToEnrich[i])
                  PMD_bnhyper <- getAllHypergeometricTest(BN_Hyper, PMD_NaN, outputdir = "PMD_Pla/HyperG_BNHyper", outputfile = FilesToEnrich[i])
                  PMD_bnhypo <- getAllHypergeometricTest(BN_Hypo, PMD_NaN, outputdir = "PMD_Pla/HyperG_BNHypo", outputfile = FilesToEnrich[i])
                  # Summary
                  resdata <- summary_HyperGeometrics_Table( crom_data$Bonferroni, BN_Hyper, BN_Hypo, PMD_NaN, outputdir = "PMD_Pla/Summary_HyperG_BN", outputfile = FilesToEnrich[i], plot = TRUE )
               }
            }

            if ( !is.na(FDR) )  {
               ## --  Plot collapsed data HyperGeometric Test - States15_FP - FDR
               plot_TestResults_Collapsed(list(fdr = PMD_fdr, fdr_hypo = PMD_fdrhypo, fdr_hyper = PMD_fdrhyper),
                                          outputdir = "PMD_Pla", outputfile = FilesToEnrich[i])
            }

            if ( BN == TRUE) {
               ## --  Plot collapsed data HyperGeometric Test - States15_FP - BN
               plot_TestResults_Collapsed(list(bn = PMD_bn, bn_hypo = PMD_bnhypo, bn_hyper = PMD_bnhyper),
                                          outputdir = "PMD_Pla", outputfile = FilesToEnrich[i])
            }
         } else {

            if( tolower(testdata) =='fisher') {
                  PMD <- getAllFisherTest(crom_data$signif, PMD_NaN, outputdir = "PMD_Pla/Fisher_CpGlist", outputfile = FilesToEnrich[i])
            } else if ( tolower(testdata) =='hypergeometric') {
                  PMD <- getAllHypergeometricTest(crom_data$signif, PMD_NaN, outputdir = "PMD_Pla/HyperG_CpGlist", outputfile = FilesToEnrich[i])
            }

         }



         ## -- Imprinting Regions PLACENTA
         ## ------------------------------------------------

         # Create genomic ranges from DMR data
         DMR.GRange <- getEnrichGenomicRanges(IR_Placenta$Chr_DMR, IR_Placenta$Start_DMR, IR_Placenta$End_DMR)

         # Find overlaps between CpGs and DMR (find subject hits, query hits )
         overDMR <- findOverlapValues(data.GRange, DMR.GRange )

         #Create a data.frame with CpGs and DMRs information
         mdata <- as.data.frame(cbind(DataFrame(CpG = data.GRange$name[overDMR$qhits]), DataFrame(DMR = DMR.GRange$name[overDMR$shits])))

         # Merge with results from meta-analysis (A2)
         crom_data <- merge(crom_data, mdata, by.x="rs_number", by.y="CpG",all=T)

         # CpGs with DMR as NA
         DMR_NaN <- ifelse(is.na(crom_data$DMR.y),'IsNA','NotNA' )

         if("FDR" %in% colnames(data) | "Bonferroni" %in% colnames(data) & (BN==TRUE | !is.na(FDR) ))
         {

            if( tolower(testdata) =='fisher') {

               if( !is.na(FDR) ) {
                  ## --  HyperGeometric Test - DMR - FDR,  FDR_hyper and FDR_hypo  (Full data ) (Depletion and Enrichment)
                  DMR_fdr <- getAllFisherTest(crom_data$bFDR, DMR_NaN, outputdir = "DMR_Pla/Fisher_FDR", outputfile = FilesToEnrich[i])
                  DMR_fdrhyper <- getAllFisherTest(FDR_Hyper, DMR_NaN, outputdir = "DMR_Pla/Fisher_FDRHyper", outputfile = FilesToEnrich[i])
                  DMR_fdrhypo <- getAllFisherTest(FDR_Hypo, DMR_NaN, outputdir = "DMR_Pla/Fisher_FDRHypo", outputfile = FilesToEnrich[i])
               }
               if ( BN == TRUE) {
                  ## --  HyperGeometric Test - DMR - BN,  BN_hyper and BN_hypo  (Full data ) (Depletion and Enrichment)
                  DMR_bn <- getAllFisherTest(crom_data$Bonferroni, DMR_NaN, outputdir = "DMR_Pla/Fisher_BN", outputfile = FilesToEnrich[i])
                  DMR_bnhyper <- getAllFisherTest(BN_Hyper, DMR_NaN, outputdir = "DMR_Pla/Fisher_BNHyper", outputfile = FilesToEnrich[i])
                  DMR_bnhypo <- getAllFisherTest(BN_Hypo, DMR_NaN, outputdir = "DMR_Pla/Fisher_BNHypo", outputfile = FilesToEnrich[i])
               }

            } else if ( tolower(testdata) =='hypergeometric') {

               if( !is.na(FDR) ) {
                  ## --  HyperGeometric Test - DMR - FDR,  FDR_hyper and FDR_hypo  (Full data ) (Depletion and Enrichment)
                  DMR_fdr <- getAllHypergeometricTest(crom_data$bFDR, DMR_NaN, outputdir = "DMR_Pla/HyperG_FDR", outputfile = FilesToEnrich[i])
                  DMR_fdrhyper <- getAllHypergeometricTest(FDR_Hyper, DMR_NaN, outputdir = "DMR_Pla/HyperG_FDRHyper", outputfile = FilesToEnrich[i])
                  DMR_fdrhypo <- getAllHypergeometricTest(FDR_Hypo, DMR_NaN, outputdir = "DMR_Pla/HyperG_FDRHypo", outputfile = FilesToEnrich[i])
                  # Summary
                  resdata <- summary_HyperGeometrics_Table( crom_data$bFDR, FDR_Hyper, FDR_Hypo, DMR_NaN, outputdir = "DMR_Pla/Summary_HyperG_FDR", outputfile = FilesToEnrich[i], plot = TRUE )
               }

               if ( BN == TRUE) {
                  ## --  HyperGeometric Test - DMR - BN,  BN_hyper and BN_hypo  (Full data ) (Depletion and Enrichment)
                  DMR_bn <- getAllHypergeometricTest(crom_data$Bonferroni, DMR_NaN, outputdir = "DMR_Pla/HyperG_BN", outputfile = FilesToEnrich[i])
                  DMR_bnhyper <- getAllHypergeometricTest(BN_Hyper, DMR_NaN, outputdir = "DMR_Pla/HyperG_BNHyper", outputfile = FilesToEnrich[i])
                  DMR_bnhypo <- getAllHypergeometricTest(BN_Hypo, DMR_NaN, outputdir = "DMR_Pla/HyperG_BNHypo", outputfile = FilesToEnrich[i])
                  # Summary
                  resdata <- summary_HyperGeometrics_Table( crom_data$Bonferroni, BN_Hyper, BN_Hypo, DMR_NaN, outputdir = "DMR_Pla/Summary_HyperG_BN", outputfile = FilesToEnrich[i], plot = TRUE )
               }
            }

            if ( !is.na(FDR) )  {
               ## --  Plot collapsed data HyperGeometric Test - States15_FP - FDR
               plot_TestResults_Collapsed(list(fdr = DMR_fdr, fdr_hypo = DMR_fdrhypo, fdr_hyper = DMR_fdrhyper),
                                          outputdir = "DMR_Pla", outputfile = FilesToEnrich[i])
            }

            if ( BN == TRUE) {
               ## --  Plot collapsed data HyperGeometric Test - States15_FP - BN
               plot_TestResults_Collapsed(list(bn = DMR_bn, bn_hypo = DMR_bnhypo, bn_hyper = DMR_bnhyper),
                                          outputdir = "DMR_Pla", outputfile = FilesToEnrich[i])
            }

         } else {

            if( tolower(testdata) =='fisher') {
                  DMR <- getAllFisherTest(crom_data$signif, DMR_NaN, outputdir = "DMR_Pla/Fisher_CpGlist", outputfile = FilesToEnrich[i])
            } else if ( tolower(testdata) =='hypergeometric') {
                  DMR <- getAllHypergeometricTest(crom_data$signif, DMR_NaN, outputdir = "DMR_Pla/HyperG_CpGlist", outputfile = FilesToEnrich[i])
            }
         }
      }

      # WRITE FINAL ENRICHMENT DATA
      write.table( crom_data, paste0( getwd(), "/",tools::file_path_sans_ext(basename(FilesToEnrich[i])),"_Enriched.csv" ) , quote=F, row.names=F, sep="\t")
   }

} else{
   print ("Error no data to enrich.")
}
